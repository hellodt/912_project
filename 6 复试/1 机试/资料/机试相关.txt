一些题
http://wenku.baidu.com/link?url=JNREt91hvMUBKvPXQ-mWoT7aK82FTrS3BunCRBtkcRY221XW3fQckuJK4nrrxuZIl60PLoj9Az-bhLZg0_TkplKcwvtqDPcFQk9A-S-BIkG

http://wenku.baidu.com/view/e8efe23743323968011c9225.html

http://wenku.baidu.com/link?url=JNREt91hvMUBKvPXQ-mWoT7aK82FTrS3BunCRBtkcRY221XW3fQckuJK4nrrxuZIl60PLoj9Az-bhLZg0_TkplKcwvtqDPcFQk9A-S-BIkG

http://wenku.baidu.com/view/2f42cffc284ac850ad0242e6.html?from=search

http://wenku.baidu.com/view/45b61802b0717fd5360cdcee.html?from=search

http://m.oschina.net/blog/356073

==================
大数阶乘
long time = System.currentTimeMillis();
        Integer base = new Integer(1000);   
        BigInteger result = new BigInteger("1");   
        for(int i = 1; i <= base; i++){   
                String temp1 = Integer.toString(i);   
                BigInteger temp2 = new  BigInteger(temp1);   
                result = result.multiply(temp2);   
        }   
        long time2 = System.currentTimeMillis();
        System.out.println("time:" + (time2 - time));
        System.out.println("" + base + "! = " + result);
或数组乘

==========================================================================================
最大子序列和
http://www.cnblogs.com/CCBB/archive/2009/04/25/1443455.html

long maxSubSum4(ArrayList<Integer> a)
    {
        long maxSum = 0, thisSum = 0;
        for (int j = 0; j < a.size(); j++)
        {
            thisSum += a.get(j);
            if (thisSum > maxSum)
                maxSum = thisSum;
            else if (thisSum < 0)
                thisSum = 0;
        }
        return maxSum;
    }

很容易理解时间界O(N) 是正确的，但是要是弄明白为什么正确就比较费力了。其实这个是算法二的一个改进。分析的时候也是i代表当前序列的起点，j代表当前序列的终点。如果我们不需要知道最佳子序列的位置，那么i就可以优化掉。

    重点的一个思想是：如果a[i]是负数那么它不可能代表最有序列的起点，因为任何包含a[i]的作为起点的子序列都可以通过用a[i+1]作为起点来改进。类似的有，任何的负的子序列不可能是最优子序列的前缀。例如说，循环中我们检测到从a[i]到a[j]的子序列是负数，那么我们就可以推进i。关键的结论是我们不仅可以把i推进到i+1，而且我们实际可以把它一直推进到j+1。

    举例来说，令p是i+1到j之间的任何一个下标，由于前面假设了a[i]+…+a[j]是负数，则开始于下标p的任意子序列都不会大于在下标i并且包含从a[i]到a[p-1]的子序列对应的子序列（j是使得从下标i开始成为负数的第一个下标）。因此，把i推进到j+1是安全的，不会错过最优解。注意的是：虽然，如果有以a[j]结尾的某序列和是负数就表明了这个序列中的任何一个数不可能是与a[j]后面的数形成的最大子序列的开头，但是并不表明a[j]前面的某个序列就不是最大序列，也就是说不能确定最大子序列在a[j]前还是a[j]后，即最大子序列位置不能求出。但是能确保maxSum的值是当前最大的子序列和。这个算法还有一个有点就是，它只对数据进行一次扫描，一旦a[j]被读入处理就不需要再记忆。它是一个联机算法。


联机算法：在任意时刻算法都能够对它已读入的数据给出当前数据的解。

==========================================================================================
给定一棵二叉树的前序遍历和中序遍历，求其后序遍历
typedef struct bt{
    int info;
    bt *left;
    bt *right;
}bt;
bt* create(int prei, int midi, int len)
{
    int i;
    bt *p;
    if(len<=0) 
        return NULL;
    for(i=0;i<len && pre[prei]!=mid[midi+i];i++) ;
    p=new bt;
    p->info=pre[prei];
    p->left=create(prei+1,midi,i);
    p->right=create(prei+i+1,midi+i+1,len-i-1);
    return p;    
}
void postorder(bt* t)
{
    if(t==NULL)
        return;
    postorder(t->left);
    postorder(t->right);
    printf("%d ",t->info);
    delete t;
}

==========================================================================================
质因数个数
准备素数表，线性查找计算
==========================================================================================
二进制逆序数
public static void main(String[] args) {
        long time = System.currentTimeMillis();
        BigNumber.print("xxxx here");
        long time2 = System.currentTimeMillis();
        System.out.println("time:" + (time2 - time));
    }
    
    public static void print(String num){
        BigInteger big = new BigInteger(num);
        String reverse = StringUtils.reverse(big.toString(2));
        big = new BigInteger(reverse, 2);
        System.out.println(big.toString(10));
    }

其他的
char x[1005];
int t[40005],r[40005],a[40005];
void convert(int m,int n)
{
    int i,k;
    while(a[0]>=1)
    {
        for(i=a[0],k=0,r[0]=a[0];i>=1;i--)
        {
            k=k*m+a[i];
            r[i]=k/n;
            k%=n;
        }
        t[++t[0]]=k;
        for(i=r[0];i>=1&&r[i]==0;i--,r[0]--) ;
        for(i=0;i<=r[0];i++)
            a[i]=r[i];
        memset(r,0,sizeof(r));
    }
}
int main()
{
    int i,len;
    while(scanf("%s",&x)!=EOF)
    {
        len=strlen(x);
        for(i=1;i<=len;i++)
            a[i]=x[len-i]-'0';
        a[0]=len;t[0]=0;
        convert(10,2);
        len=t[0];
        for(i=1;i<=len;i++)
            a[i]=t[len-i+1];
        a[0]=len;t[0]=0;
        convert(2,10);
        for(i=t[0];i>=1;i--)
            printf("%d",t[i]);
        printf("\n");
    }
    return 0;
}
==========================================================================================
有若干张邮票，要求从中选取最少的邮票张数凑成一个给定的总值。

有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 

基本算法 
这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取 n[i]件。令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值，则：f[i][v]=max{f[i-1][v-k*c[i]]+ k*w[i]|0<=k<=n[i]}。复杂度是O(V*∑n[i])。 
==========================================================================================
第一行：M和N
　　第二行：X
　　M和N是一个十进制数，M和N都在[2-36]之间，X是一个M进制数，X在[1-2*10^19]
　　输出：一行
　　第一行：现在要求你将M进制数X转换成N进制数输出

biginteger
自己做思路：
http://www.cnblogs.com/kuangbin/archive/2011/08/09/2132467.html

/*
高精度进制转换 
把oldBase 进制的数转化为newBase 进制的数输出。
调用方法，输入str, oldBase newBase.
change();
solve();
output();
也可以修改output(),使符合要求，或者存入另外一个字符数组，备用 
*/
#include<stdio.h>
#include<string.h>
#defien MAXSIZE 1000
char str[MAXSIZE];//输入字符串
int start[MAXSIZE],ans[MAXSIZE],res[MAXSIZE];//被除数，商，余数
int oleBasw,newBase;//转换前后的进制

//单个字符得到数字
int getNum(char c)//这里进制字符是先数字，后大写字母，后小写字母的 
{
    if(c>='0'&&c<='9') return c-'0';//数字 
    if(c>='A'&&c>='Z') return c-'A'+10;//大写字母 
    return c-'a'+36;//小写字母 
}    
//数字得到字符
char getChar(int i)
{
    if(i>=0&&i<=9)return i+'0';
    if(i>=10&&i<=35)return i-'10'+'A';
    return i-36+'a';
}     
void change()//把输入的字符串的各个数位还原为数字形式
{
    int i;
    start[0]=strlen(str);//数组的0位存的是数组长度
    for(i=1;i<=start[0];i++)
        start[i]=getNum(str[i-1]); 
}    
void solve()
{
    memset(res,0,sizeof(res));//余数位初始化为空
    int y,i,j;
    while(start[0]>=1) 
    {
        y=0;i=1;
        ans[0]=start[0];
        while(i<=start[0])
        {
            y=y*oldBase+start[i];
            ans[i++]=y/newBase;
            y%=newBase;
        }    
        res[++res[0]]=y;//这一轮得到的余数
        i=1;//找下一轮商的起始处，去掉前面的0
        while(i<=ans[0]&&ans[i]==0) i++;
        memset(start,0,sizeof(start));
        for(j=i;j<ans[0];j++)
           start[++start[0]]=ans[j];
        memset(ans,0,sizeof(ans)); 
    }    
}  
void output()//从高位到低位逆序输出 
{
    int i;
    for(i=res[0];i>=1;i--)
        printf("%d",getChar(res[i]));
    printf("\n");
}

==========================================================================================
矩阵二分求幂
待定
二分幂
http://blog.sina.com.cn/s/blog_7865b08301014mbo.html
http://blog.csdn.net/prstaxy/article/details/8740838

快速取模
http://blog.sina.com.cn/s/blog_8619a25801010wcy.html

矩阵二分乘法
http://www.cnblogs.com/liushaobo/p/4373846.html
http://www.cnblogs.com/liushaobo/p/4373845.html

==========================================================================================
访问服务器
http://blog.csdn.net/gladyoucame/article/details/8680881
贪心算法

http://t.jobdu.com/thread-7805-3-1.html
http://www.cnblogs.com/windcarp/p/4758323.html


==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================
==========================================================================================

