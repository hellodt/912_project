发信人: Sisyphus (鳥扯), 信区:        
标  题: 编译2003 A
发信站:  (Mon Jan  6 16:48:36 2003), 站内信件

造福师弟师妹

1（5%） 判断是非
        1.1     DAG是一种中间表示。
        1.2     确定（静态）数组和可变（动态）数组的区别在于数组元素
地址的计算公式不一样。
        1.3     文法G的句型TdFba的句柄是a
                G:      E -> EbT | T
                        T -> TdF | F
                        F -> a
        1.4     每个LL(1)文法都是LR(1)的。
        1.5     PL/0编译程序的 T 型图如图所示
        
                Pascal                          VASM（假象机的汇编）
                                PL/0

2（5%） 指明所述技术是编译哪个（哪些）阶段（词法分析，语法分析，语义分析
，中间代码生成，代码优化，目标代码生成）会采用的？
        2.1     图着色技术
        2.2     递归子程序法
        2.3     消除公共子表达式
        2.4     语法制导翻译
        2.5     代码外提
        
        
3（5%）完成下列各题
        3.1     缩写词LL(1)中的两个L和1都是什么意思？
        3.2     给出缩写词CFG的英文全称
        
        
4（%10）构造下述文法等价的最小确定有穷自动机
        A -> aA | bB | a | b
        B -> bB | epsilon
        
        
5（15%）对下述文法实施消除左递归，提左公因子变换，得到的是LL(1)文法么？
为什么？
        A -> yB | y
        B -> Bx | y | epsilon
        
        
6（10%）构造下述文法的LR(1)项目集规范族的I0和I1
        S -> SaSb | epsilon
        I0 包含 S' -> .S , #
        I1 = GO(I0, S)
        
7（10%）若程序运行时的存储空间采用栈式动态分配策略，图1的类Pascal程序到
语句（15）时（语句15尚未执行）
        7.1     说明运行栈（图2）的每一帧属于哪个过程的活动记录。
        7.2     给出当前执行过程的display表的内容
        
        图就不画了，反正就是一段Pascal代码，嵌套定义了一个可递归的函数，然后胡
乱调用来调用去的
        
8（10%）利用图3的程序和图4的运行栈说明pascal语言的变参传递方式（即传地址
）的实现
        也是一个小程序，图不画了


9（10%）下面是一个求定点二进制数的数值的属性文法，其中使用了三个属性，显
然这种方案无法在一趟遍历语法树的时候完成求值。请你重新设计一个属性文法，
比如S属性文法，以便能够在语法分析的同时完成求值。
        N -> S1 "." S2  { 
                              N.val := S1.val + s2.val;
                              S1.fac := 1;
                              S2.fac := power(2, -S2.len);
                        }
                                        
        S -> S1 B       {
                              S.val := S1.val + B.val;
                              S1.fac := power(2, S.fac);
                              B.fac := S.fac;
                              S.len := S1.len + 1；
                         }
                                        
        S -> B          {
                              S.val := B.val;
                              B.fac := S.fac;
                              S.len := 1;
                         }
                                        
        B -> "0"        {       B.val := 0;     }
        B -> "1"        {       B.val := B.fac; }
        
10（10%）在下列两题中任选一题
        10.1    对PL/0语言增加FOR循环语句。
                <FOR循环语句> ::= FOR '(' 语句1 ; 条件 ; 语句2 ')' DO 语句3
                语义和 C 一样。
           bison的语法文件中增加规则：
  for_stat : FOR '(' stat ';' {[1]} condition {[2]} ';' {[3]} stat {[4]} ')'
                   DO {[5]} stat {[6]}
 在[1]到[6]中添加合适的 C 语句，实现生成跳转指令的功能。提供的变量和函数有：
    地址栈：用数组cx0[]实现，栈顶指针cx0n；
    当前生成的目标指令地址：cx，目标指令存放在数组code[]里
    代码生成函数：gen(ins, 0, addr)，ins是操作符，可能是无条件跳转jmp或者条件
    为假跳转jpc，addr是跳转目标的地址，可以用0填充，再以后的编译中再回填，参
    见例子。
         一个例子：
              IF {} condition { cx0[cx0n++] = cx; gen(jpc,0,0);}
              THEN {} stat { code[cx0[cx0n-1]].addr = cx; cx0n--; }
                        
        10.2    Decaf的源程序片断如图5所示，相应的TAC中间代码如图6所示，
填写图6中缺少的内容。
                        
                        不写源代码了，主要是类中this的处理和vtable的处理
                        
11（10%）任选一题
        11.1    符号调试器（symbolic debugger）是一种允许用户使用原始的
源程序文本和符号进行调试的软件，即用户使用这种软件可在源程序上设置断点，
以便在程序运行时跟踪程序，察看某些变量的值和数据结构的变化等等。这种软件
的实现有两种方法，第一种方法是写一个解释系统，交互的翻译源程序和执行语句
行（是不是类似Qbasic那样的？----Sisyphus），第二种方法是编译器在生成编译
代码的同时生成指定的调试信息，即能进行编译了的代码的调试
（BCC -v、TASM /zi、TLINK /v就是干这个的----Sisyphus）。若采用第二种实现
方案，请你列出编译器必须做哪些工作，或者说，编译器必须维护和记录哪些信息，
可能要增加或修改哪些数据结构才能予以支持。
        
        11.2    如果将PL/0扩充增加指针类型，请设计一种合适的符号表方案
（或修改PL/0编译器的符号表），对你的设计依据给予简要说明并以下面的类
Pascal程序片断为例，给出相应符号表的内容。
                TYPE    ptr = pointer to integer;
                                ......
                VAR             link : ptr;
                                Number : integer
                                ......
                                
好多啊......敲键盘累死了......ZZZzzz


--
为什么每次我想堕落的时候，总是感到力不从心呢？sigh……


[m[1;36m※ 来源:· bbs.net9.dhs.org·[FROM: 10.9.21.62][m
