<html>
<head>
<title>编译原理</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../css/text.css" type="text/css">
<STYLE TYPE="text/css">
<!--
BODY {background-image:   url(../../../img/index/bg1.gif);
background-position: right;
background-repeat: no-repeat;
background-attachment: fixed;
}
-->
</STYLE>

</head>

<body bgcolor="#FFFFFF" text="#000000" >
<table width="100%" border="0" cellspacing="0" cellpadding="0" class=text>
  <tr>
    <td> 　　3．<br>
      　　（1） 检查DAG中是否已有一结点，其唯一后继为NODE（B），且标记为op（即找公共子表达式）。如果没有，则构造该结点n，否则就把已有的结点作为它的结点并设该结点为n，转4.。<br>
      　　（2） 检查DAG中是否已有一结点，其左后继为NODE（B），右后继为NODE（C），且标记为op(即找公共子表达式)。如果没有，则构造该结点n，否则就把已有的结点作为它的结点并设该结点为n。转4.。<br>
      　　4．如果NODE（A）无定义，则把A附加在结点n上并令NODE（A）＝n；否则先把A从NODE（A）结点上的附加标识符集中删除（注意，如果NODE（A）是叶结点，则其标记A不删除），把A附加到新结点n上并令NODE（A）＝n。转处理下一四元式。 
      <br>
      　　例 试构造以下基本块G的DAG。<br>
      　　(1) T<sub><font size="-1">0</font></sub>∶=3.14<br>
      　　(2) T<sub><font size="-1">1</font></sub>∶=2 * T<sub><font size="-1">0</font></sub><br>
      　　(3) T<sub><font size="-1">2</font></sub>∶=R + r<br>
      　　(4) A∶=T<sub><font size="-1">1 </font></sub>* T<sub><font size="-1">2</font></sub><br>
      　　(5) B∶=A<br>
      　　(6) T<sub><font size="-1">3</font></sub>∶=2 * T<sub><font size="-1">0</font></sub><br>
      　　(7) T<sub><font size="-1">4</font></sub>∶=R + r<br>
      　　(8) T<sub><font size="-1">5</font></sub>∶=T<sub><font size="-1">3</font></sub> 
      * T<sub><font size="-1">4</font></sub><br>
      　　(9) T<sub><font size="-1">6</font></sub>∶=R - r<br>
      　　(10) B∶=T<sub><font size="-1">5</font></sub> * T<sub><font size="-1">6</font></sub></td>
  </tr>
</table>
</body>
</html>
