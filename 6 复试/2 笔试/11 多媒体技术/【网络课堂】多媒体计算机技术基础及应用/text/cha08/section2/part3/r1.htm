<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<table width="100%" border="0" cellspacing="3" cellpadding="3">
  <tr> 
    <td class="text"> 　　传统的电话业务仅限于点对点的通信，为了支持位于不同地点的多个成员协同工作，有必要把多个地点连接起来。为此需要多点控制单元MCU(Multipoint 
      Control Unit)，也可称为桥接设备，来提供这种功能。MCU是视频会议系统中的关键设备，它的作用是图像、语音、数据信号进行切换，而且是对数据流进行切换，并不象电话交换机对模拟信号进行切换。我们设计的工作速率为64kbps到2Mbps，每次会议工作在一个速率上，如果与它连接终端速率不一致，它便自动地工作在几个终端的最低速率上，在同一次会议，所有终端都会选用同一速率。<br>
      　　MCU对视频信号采用直接分配的方式，若某会场有发言者，则他的图像信号便会传递到MCU，MCU将其切换到它所连接的所有会场。对数据信号，MCU采用广播方式将某一个会场的数据切换到其他的会场。对语音信号可以分两种情况：如只有一个会场发言，MCU将其切换到其他所有会场；若同时有几个会场发言，MCU将它们的音频信号进行混合处理，挑出电平最高的音频信号，然后切换到除该会场外的所有其他会场。<br>
      　　目前MCU产品，一个MCU最多可连接12个会议终端（或别的MCU）。ITU-T H.320系列建议的H.231和H.243分别描述了2Mbps以下数字信道的视听系统MCU的结构组成及利用MCU在2Mbps信道上对多个视听终端建立通信的方法。<br>
      　　<b><font color="#003399">一、MCU的结构原理</font></b><a name="01"></a><br>
      　　MCU的结构原理如图8.13所示。<br>
      　　MCU的每个端口都连接着一个与呼叫控制相连的网络接口单元，在网络接口单元的MCU这一边，数据流包含在按H.221建议列出的传输率传输的一个或多个双向通道内。引入数据流进入解复用器内，解复用器将引入数据流分解成视频、音频、数据和控制等几种类型的信息并分别把它们传递到相应的处理器内。多路复用器则将各个处理器送出的数据流组合成一个引出数据流以供传输给会议终端。<br>
      <b><font color="#003399">　　 8-13 
      MCU结构原理图</font></b> <font color="#990000">（点击查看大图）</font><br>
      　　<a href="t1.htm" target="_blank"><img src="../../../../images/chatp/chap08/013.gif" width="333" height="190" border="0"></a> 
      <br>
      　　<font color="#003399">1.网络接口单元</font><br>
      　　网络接口单元分输入、输出方向,该单元校正输入数据流中由H.221建议定义的FAS信号和输出由H.221、H.230定义的输出码，并按本系统的时钟定位输入的数据流。在接口模块的输出方向插入所需的BAS码和相关信令，形成信道帧，以便输出到数字信道。一网络接口单元可支持多个逻辑端口。<br>
      　　<font color="#003399">2.端口</font><br>
      　　端口是一个可支持一个语音或视听终端的逻辑实体，它只与一对多路复用器/解复用器相连。<br>
      　　<font color="#003399">3.解复用器</font><br>
      　　进入解复用器的信号是会议终端传送的完全符合H.221建议的数据流。解复用器的动作与会议终端接收方的动作类似，包括：<br>
      　　・帧恢复和帧定界<br>
      　　・缓冲、同步及相关多个通道的定序 <br>
      　　・BAS的分解并把其中相应的某些信息送往控制处理器<br>
      　　・加密码的分解及解密<br>
      　　・分解音频信息并送往音频处理器<br>
      　　・分解视频信息并送往视频处理器<br>
      　　・分解数据信息并送往数据处理器<br>
      　　模式控制BAS码及相关的音频、视频和数据信息之间必须保持正确的时序关系。<br>
      　　<font color="#003399">4.音频处理器</font><br>
      　　音频处理器由语音代码转换器（ATC）和语音混合模块组成，用来完成语音的处理。ATC从各个端口输入的数据流的帧结构中分离出A律、U律的语音信号，并进行译码，然后送入混合器进行线性叠加，最后送入到编码器，形成合适的编码形式，插入到输出的数据流中。<br>
      　　混合器送往每个会议终端的信号都是所有其他与会会议终端的信号的和。随着音频信号个数的增加，回声和噪音也会累积，所以必须采取回声抑制和降低噪音的措施。<br>
      　　如果只有两个终端参加会议，则音频处理器的语音混合功能由切换功能代替。考虑到视频信号的时延，在音频处理器内应对音频信号进行一定的延迟（不大于30ms）。<br>
      　　<font color="#003399">5.视频处理器</font><br>
      　　类似于音频处理器，视频处理器对输入视频信号也有两种处理方式：一种是进行视频切换，以便插入信道帧后分配到各个会场，无需对视频信号进行处理；另一种是进行视频混合，当一个会场需同时看到多个会场的图像（在一个显示器上同时看到其他所有会场的图像或分屏显示）时，MCU可对多路视频信号进行混合处理。这种混合是对多个图像以分屏形式空分复用一个组合图像。<br>
      　　目前的MCU产品只实现了视频切换的功能。<br>
      　　<font color="#003399">6.数据处理器</font><br>
      　　数据处理器为可选单元，包括H.243建议的数据广播功能，以及按照H.200/A270系列建议的多层协议MLP，完成非话信息的处理。<br>
      　　在数据广播功能时，任一时刻只能接收一路LSD（低速数据）和/或一路HSD（高速数据），广播给由控制处理器按照接收这种数据的能力决定的相连终端。<br>
      　　在MLP数据处理功能时，数据处理器可执行以下的功能：<br>
      　　・处理远端信息<br>
      　　・传输会议控制信号（请求/确认信号，主席控制令牌，音频/视频切换）<br>
      　　<font color="#003399">7.控制处理器</font><br>
      　　控制处理器负责确定正确路由、混合/切换以及传递给每个多路复用器的音频、视频、数据及控制信号的格式和时序关系，同时具有会议控制功能。<br>
      　　<font color="#003399">8.多路复用器</font><br>
      　　多路复用器把从音频处理器、视频处理器、数据处理器和控制处理器送来的数据流组帧并插入BAS码值。<br>
      　　总之，MCU将各会议终端送来的信号进行分离，抽取出音频、视频、数据和信令信号，分别送到相应的处理单元，进行音频混合或切换、视频切换、数据广播和确定路由选择、定时和处理会议控制等等，处理后的信号由复用器按H.221格式组帧，然后送往相应的端口输出。<br>
      　　MCU与终端 MCU之间的连接方式有星形、哑铃形、MCU星形及分层结构等。<br>
      <br>
      　　<font color="#003399">MCU是视频会议系统中的关键设备，它的作用是对图像、语音数据信号进行切换，而且是对数据流进行切换，MCU对视频信号采用直接分配的方式，若某会场有发言者，则他的图像信号便会传送到MCU，MCU将其切换到它所连接的所有会场。对数据信号，MCU采用广播方式将某一会场的数据切换到其它所有会场。对语音信号可以分两种情况：如只有一个会场发言，MCU将其切换到其它所有会场；若同时有几个会场发言，MCU将他们的音频信号进行混合处理，挑出电平最高的音频信号，然后切换到除该会场外所有其它会场。<br>
      　　MCU主要组成是：<br>
      　　1.网络接口单元；<br>
      　　2.多路复用和解多路复用；<br>
      　　3.视频、音频、数据、控制密钥及呼叫处理。</font><br>
      <br>
      　　<b><font color="#003399">二、MCU控制下的多点会议建立过程</font></b><a name="02"></a><br>
      　　<font color="#003399">1.多点会议通信过程的建立</font><br>
      　　(1) 单MCU控制下通信过程的建立<br>
      　　在会议终端数目有限，业务量不大时，可由单个MCU控制整个会议。会议开始时，多个会议呼叫是逐次进行的，因此在建立呼叫的初始阶段，各个终端是按顺序加入会议的。<br>
      　　第一个加入会议的终端Ta向MCU发送&quot;通信帧结构信号&quot;，并接收 MCU发来的OF模式的帧结构信号、&quot;SCM-cap&quot;（所选通信模式-能力）信号。OF模式是指带有SC（FAS、BAS）子信道的一个64kbps时隙，其中的56kbps为具有G.711建议的A律语音信号；&quot;SCM&quot;为MCU所具有的&quot;所选的通信模式&quot;，意即对每一种传输速率有不同的视频、语音、数据信号速率的组合模式，在H.243中列举了不同通信模式的例子，例如在128kbps传输速率下，有多个视频、语音信号的速率的组合模式。一种为16kbps速率的语音信号、1.6kbps的控制信号（FAS、BAS）和110.4kb/s速率的图像信号。三者加起来的总传输速率为128kbps，这是一种通信模式；也可以是由48kbps速率的G.711语音信号、1.6kbps速率的控制信号、78.4kbps速率的图像信号组成的另一种128kbps传输速率的通信模式。对每一种传输速率都有若干种通信模式。对于常用的几种传输速率（64kbps、128 
      kbps、384 kbps、1.5Mbps、2.048Mbps）而言，MCU都配置了它们的通信模式。若某次会议使用一种传输速率，MCU工作过程为：<br>
      　　・MCU发送该速率的&quot;SCM-cap&quot;标记给终端，以便根据终端现时的能力（性能）自动选择合适的通信模式。<br>
      　　・MCU发送&quot;OF模式&quot;信号，以便使终端从FAS信号中提取8比特组定位信号。<br>
      　　・在发送上述能力标记后，MCU又给终端发送MCC信令（多点会议命令），终端接收后调节输出传输速率，使它等于输入传输速率。<br>
      　　・继MCC信令后，MCU再发送MIZ（多点零通信指示），意思是告诉该终端，此时没有其他终端加入会议，并指出会议呼叫已建立。<br>
      　　・MCU搜索已连接的端口的输入帧定位，在建立帧和复帧定位之后，存储第一个会议终端的能力（性能），并指定它为Ta，Ta则处于等待状态。<br>
      　　第二个终端Tb加入会议的过程：MCU向第二个终端传送它的SCM能力集和MCC，指出会议呼叫已建立。MCU搜索这个连接上的端口上所输入信号的帧和复帧定位，并存储第二个终端Tb的能力，当Ta和Tb 
      都已完成和MCU之间的以上动作后，MCU向Ta发送Cancel-MIZ（取消MIZ）信令Ta和Tb便可通过MCU进行正常的通信。注意MCU在切换视频时，应向发送视频的终端传送VCU（快速刷新请求）。<br>
      　　第三个终端Tc加入会议的过程：MCU向第三个终端传送它的SCM能力集和MCC，指出会议呼叫已经建立，MCU搜索与第三个终端相连接的端口上输入信号帧和复帧定位，存储Tc的终端能力后，Tc便可以加入会议。MCU在把某个终端（Ta或Tb）的视频切换给Tc时，要发送VCU给Ta或Tb。同样，当把Tc的视频切换给其他终端时，MCU要向Tc发送VCU信令。<br>
      　　第四个终端及以后的终端加入会议的过程与第三个终端加入会议的过程一样。<br>
      　　由于单个MCU所连的会议终端不多，所以这种情况下多点会议电视系统的会议控制方式（切换方式）适合采用语音控制、强制显像控制模式。<br>
      　　(2) 多MCU之间的互联<br>
      　　① 初始化过程<br>
      　　两个及以上的MCU互联时，执行下列过程：<br>
      　　MCU之间的每个初始化通道建立后，每个MCU像对一个会议终端那样在通道上发送能力集，然后是MCU命令。各MCU通过从另一个MCU收到的MCC的值识别到那个MCU的存在。<br>
      　　② 主MCU的指定<br>
      　　多个MCU相连时，为了统一控制，避免冲突，需要有一个MCU被指定为主MCU执行下面的过程1。在三个或多于三个的MCU采用星形连接时，一般主MCU应为位于星形中心的MCU，因此应在呼叫之前被指定好。但对于哑铃形连接（只有两个MCU），则应由其中一个MCU执行下面的过程2。<br>
      　　过程1（呼叫前指定主MCU）：在这个主MCU与另外的MCU相连时（通过收到的MCC信令识别出来），它发送MIM（多点指示主MCU信令），而忽略可能接收到的作为过程2的结果的任何其他MIM信令。<br>
      　　过程2（呼叫前未指定主MCU）：若一个MCU从它的一个端口接收到MCC信令但并未从该端口接收到MIM信令时，则执行内容决定过程（即若两个相连的MCU同时发送了相互冲突的命令时，则各MCU先不对收到的信令作出反应，而是发送一个随机SBE数，收到的数比自己发送的数大的MCU维持原发送的信令，而另一个MCU必须对它收到的MCU作出反应，若两随机数相同，则再各发送一个SBE随机数，直到不同为止），如果结果是此MCU发送的随机数比收到的小，则此MCU即自认为是主MCU并向其他MCU发送MIM信令。<br>
      　　三个及以上的MCU相连时，主MCU的自动指定尚有待进一步研究。<br>
      　　(3) 会议结束<br>
      　　如果会议终端依次退出，直到只剩下一个终端时，则MCU向该终端发送MIZ信令，声明会议结束。<br>
      　　<font color="#003399">2.视频切换</font><br>
      　　视频切换有两种过程：在某些MCU中，视频信号不经过任何处理，只是执行切换功能；而另一些MCU中，视频信号在被切换之前经过了处理，以保证在输入信号的校错成帧时无不连续情况。<br>
      　　<font color="#003399">3.数据广播过程</font><br>
      　　在多点多媒体会议系统中，除了视频和音频外，还有其他数据媒体，如传真、计算机文件等，在会议过程中可以分发文件、传真等等。这种数据分发由数据令牌方式控制。持有令牌的终端有权向所有其他终端广播它的数据。以下我们讨论LSD（低速数据）令牌的管理。对于HSD（高速数据）可以采用几乎相同的过程。<br>
      　　(1) 令牌的分配<br>
      　　欲传送LSD的终端要先去索取LSD令牌。该终端用TD表示。TD向MCU发送{DCA-L，（B）}LSD令牌的分配，其中（B）是要求的数据传输速率，如果未得到MCU的回答，TD可以过适当时间后再次请求。<br>
      　　一旦MCU从TD接收了{DCA-L，（B）}，MCU动作如下：<br>
      　　l 如果它已分配了令牌给另外的终端，或者已经接收了另一个请求，或者处在数据信道关闭、模式转换处理期间，或者请求的数据率不是当前公有的能力集中的一个数据率，或者MCU处于资源耗尽状态，则MCU应答DCR－L，拒绝这一请求。<br>
      　　l 如果它既未分配令牌，又未接收其他的请求，又无拒绝条件发生，则MCU完成所需要的动态模式转换，动态模式转换完成之后，MCU发送DIT－L给TD，此时TD可以开始发送数据。<br>
      　　(2) 令牌的释放和重新分配<br>
      　　TD完成了数据分发之后，通过发送IDS－L或DCC－L释放令牌，MCU接收到DIS－L或DCC－L后，发送DCR－L给TD，并发送DCC－L去关闭所有其他终端与这个LSD有关的数据信道。然后这个LSD令牌可以重新分配。<br>
      　　（3）令牌的回收<br>
      　　主席控制终端可以向MCU传送DCR－L回收令牌，MCU接收后再向其他终端广播DCR－L，强行回收数据令牌。然后MCU关闭LSD信道。必要时（如为了解除某种错误）MCU可以自选回收令牌。<br>
      　　终端在持有令牌期间接收了DCR－L，必须停止在LSD信道上的数据传送，然后它必须传送DIS－L或DCC－L给MCU。<br>
      　　<font color="#003399">4.MCU控制模式</font><br>
      　　在多点会议电视系统进行会议控制时，可采用语音控制、强制显像控制、主席控制等三种方式。<br>
      　　(1) 语音控制模式<br>
      　　语音控制模式为全自动工作模式。<br>
      　　在一个多点会议进行的过程中，当同时有多个会场要求发言时，MCU从这些会场终端送来的数据流中提取出音频信号，在语音处理器中进行电平比较，选出电平最高的音频信号，将最响亮的语音发言人的图像与语音信号广播到其他的会场，为了避免不必要的干扰引起的切换，MCU的切换过程应有一定的时延。切换前的发言时间应为1～3秒。<br>
      　　为避免咳嗽、关门声等其他干扰造成的误切换，两次切换之间的时间间隔应为1～5秒。<br>
      　　(2) 强制显像控制模式<br>
      　　强制显像控制模式又称为演讲人控制模式。<br>
      　　当召开一次多点会议时，要发言的人（或称演讲人）通过编解码器向MCU请求发言。此时如按桌上的按钮，或触摸控制盘上相应的键，编解码器便给MCU一个请求信号MCV（多点强制显示像命令），若MCU认可便将它的图像、语音信号播放到所有与MCU相连接的会场终端，同时MCU给发言人一个已&quot;播放&quot;的指示MIV（多点显像指示），使发言人知道他的图像、语音信号已被其他参加会议的会场收到。当发言人讲话完毕时，MCU将自动恢复到语音控制模式。<br>
      　　需要说明，上述两种控制模式仅适用于参加会议的会场不多的情况。尤其是在语音控制模式下，比较的语音路数越多，则背景噪声越大，MCU的语音处理器已很难选出最高电平的语音信号。为可靠起见，以一个MCU控制十几个会场终端数目为限，再多会场数目不适于采用语音控制。<br>
      　　(3) 主席控制模式<br>
      　　主席控制模式符合H.243建议。在这种控制模式下，会议主席行使会议的控制权，他掌握行使主席权力的令牌，该令牌为主MCU所承认。主席可点名某分会场发言，并与它对话，其他分会场接收他们的图像和语音信号。分会场发言需向主席申请。若主MCU收回令牌，则原主席将失去会议主席的权力；他在的会场也就不再是主会场。<br>
      　　<b><font color="#003399">三、视频会议系统的控制</font></b><br>
      　　T.124建议（通用会议控制）草案提供了会议管理和对声像与视听终端及MCU进行控制的高层框架。该建议与T.122（用于声像会议和视听会议的多点通信服务MCS）、T.125（用于声像会议和视听会议的多点通信服务规程）及T.123（用于声像会议和视听会议应用的网路特定传输规程）一起建立和管理会议控制的机制。<br>
      　　T.124建议包括下列通用会议控制（general conference control，GCC）功能组件：会议建立与结束，管理会议名表，管理应用名表，应用登记服务及会议指挥等。限于篇幅，这里只介绍会议建立与结束部分。<br>
      　　为便于说明，先介绍会议控制的几个关键概念：<br>
      　　(1) 会议轮廓（conference profile）<br>
      　　由GCC提供者维护的一个数据库，由与会议整体相关的信息如会议名、口令等组成。<br>
      　　(2) 会议名表（conference roster）<br>
      　　由GCC提供者维护的一个数据库，由组成会议的各结点的相关信息的一个列表组成。<br>
      　　(3) 指挥者（conductor）<br>
      　　指挥者是会议内的一个结点，它可控制该会议某些方面的情况（如对会议参加者的控制及对会议结束的控制等）。一个会议可有一个指挥者，或者没有。一个结点通过获取指挥者令牌或通过请求或接收现任指挥者的指挥权成为指挥者。<br>
      　　(4) 结点及结点控制器（node，node controller）<br>
      　　结点是一个会议终端或MCU。一个结点可以同时是一个会议终端及MCU。<br>
      　　结点控制器是控制一个结点的功能实体。<br>
      　　(5) GCC提供者（GCC Provider）<br>
      　　对一个会议终端或MCU上的结点控制器或应用协议实体提供服务的机构。<br>
      　　(6) 顶层GCC提供者(Top GCC Provider)<br>
      　　与顶层MCS提供者同驻于一个结点的GCC提供者。顶层GCC提供者对同一会议内的其他GCC提供者无任何需求。<br>
      　　<font color="#003399">1.会议轮廓</font><br>
      　　所有会议都有下列属性，这些属性在会议创建时定义并在整个会议举行期间保持不变，每个结点参加会议时，这些属性都被传递给它。我们把这些属性称为会议的轮廓。<br>
      　　・会议名，一个数字字符串及一个可选的文本字符串，标识一个会议。<br>
      　　・会议描述符，描述一个会议的一个可选的文本字符串。<br>
      　　・口令保护或无口令保护。<br>
      　　・可列表的或不可列表的，决定本会议是否列入查询会议时提供的会议列表。<br>
      　　・可指挥的或不可指挥的，决定本会议可以置为指挥模式还是始终不可指挥。<br>
      　　・结束方式，决定本会议是只要明确结束（手工结束）时就结束，还是直到所有参加者离开时自动结束。 <br>
      　　・特权列表，一些列表的组合，指示正常情况下只有会议召集者才能拥有的特权中，哪些可被指挥者享有，哪些可被指挥模式下的任一结点享有，哪些可被无指挥模式下的任一结点所享有。<br>
      　　<font color="#003399">2. 会议建立过程举例</font><br>
      　　会议可在不同条件下通过不同的方式建立。最简单的会议是点对点会议，在这种情况下，呼叫过程不涉及MCU。在会议通过一个或多个MCU建立的情况下，典型的呼叫方式是相遇方式（Meet-Me 
      Style），此时会议的所有参加者都向一个MCU拨号呼叫；或呼叫输出方式（Call-out Style），此时由MCU向所有与会者拨号呼叫；或呼叫通过方式（Call-through 
      Style），此时由会议召集者（终端）呼叫MCU，然后再由MCU呼叫其他与会者。<br>
      　　(1) 相遇会议的建立<br>
      　　在一个相遇会议中，会议在一个MCU上建立，终端结点（如果需要，还有其他MCU）向该MCU呼叫并参加会议。如果其他MCU已参加本会议，终端结点可以呼叫这些MCU中的一个已参加会议。<br>
      　　相遇会议的初始创建可在带外完成（例如由MCU本身创立），或由第一个呼叫MCU的结点创建。在前一种情况下，GCC不参与创建。在后一种情况下，会议由召集结点在召集结点与该MCU之间的连接上发送会议创建请求原语在该MCU上创建。不论是那一种情况，会议创建时所处的结点都成为顶层GCC提供者，而召集结点本身（前者为该MCU，后者为发送创建请求原语的结点）则成为会议召集者，具有特殊的地位。<br>
      　　当使用会议创建请求原语远程创建一个会议时，在请求原语中固定了一个会议名。若该会议名在该MCU上已被其他会议使用，则该MCU的结点控制器使用一个会议名修改符保证该MCU上会议名的唯一性。其他结点若欲参加此会议时，在参加请求原语中必须提供这个会议名修改符。<br>
      　　远程创建一个会议时，创建请求原语也可包括一个可选的召集者标识符。这个标识符只在召集者想与会议断连且想以后重新参加并仍想继续拥有召集者特权时才有用。<br>
      　　欲参加一个会议的结点将在该结点与任一参加该会议的MCU之间的连接上发送会议参加请求原语。典型情况下，结点不必预先知道想参加的会议的名字。这时，在参加会议前，结点可查询MCU以获得可参加的会议的列表。这是由发送会议查询请求原语完成的。得到的回答是一个会议查询确认原语，该原语表明了该终端所连的结点的类型（即MCU），并提供一个该MCU现在参加的所有可列出会议的列表。这个列表包括每个会议的会议名，如果需要还有会议名修改符，以及会议的其他特性如会议是否是口令保护的。一旦选择了会议名，即可通过发送一个规定了该会议的会议名（如果需要还有会议名修改符）的会议参加请求原语参加该会议。如果会议需要口令，参加请求原语中也需要包含正确的口令。<br>
      　　在会议名通过带外被通知给结点时，结点可通过在会议参加请求原语中提供会议名直接申请参加会议，而无需先查询可参加的会议。若结点参加会议时需与多个相对独立的MCU相连时，由于命名冲突某些MCU可能需要会议名修改符，由于不使用会议查询原语时获取会议名修改符可能很困难，故建议在有命名冲突的可能性时，参加一个相遇会议前先使用会议查询原语。并建议在创建一个相遇会议时规定一个会议描述符，这样，具有相同会议名的多个会议更可能通过拥有不同的会议描述符而区分开。但一般情况下，在创建一个相遇会议时，最好选择一个对所有MCU都具有唯一性的会议名，而无需使用会议修改符。<br>
      　　(2) 呼叫输出会议的建立<br>
      　　在呼叫输出会议的建立过程中，由MCU创建一个会议，并由该MCU呼叫及邀请与会者参加会议。典型情况下，会议创建时规定了锁定特性，并可能规定为不可列出的。<br>
      　　然后，召集者MCU将通过依次邀请每个结点参加会议来与各终端建立物理连接。这是由向被邀请结点发送会议邀请请求原语完成的。由于会议是由该MCU创建的，该MCU就成为该呼叫输出会议的顶层GCC提供者。<br>
      　　(3) 呼叫通过会议的建立<font color="#003399"> </font><br>
      　　除了会议由一个启动终端启动创建外，呼叫通过会议的建立与呼叫输出会议的建立情况是相似的。在这种情况下，启动终端向MCU发起连接并使用会议创建请求原语创建会议。像呼叫输出会议一样，典型情况下，呼叫通过会议也是锁定的和不可列出的。呼叫通过会议创建时一般规定为自动结束，即在所有结点断连时会议将自动结束。典型情况下，呼叫通过会议规定一个空会议名，因为不需要别的结点明确地参加会议。如果在召集结点（MCU）上已有一个具有空会议名的会议存在，则结点控制器只简单地选择一个随机名作为新会议的会议名。<br>
      <font color="#003399">　　</font>(4) 点对点会议的建立<br>
      　　点对点会议与以上讨论的几种会议有明显不同,因为它只涉及两个终端结点，而不需要MCU。会议建立前，呼叫终端先向被呼叫终端发送会议查询请求原语，以获悉对方是终端还是MCU。在点对点呼叫的情况下，响应查询请求原语的会议查询确认原语表明了对方是否为一个会议终端（或会议终端/MCU的混合结点）。一旦知道对方是终端，呼叫终端即通过发送会议创建请求原语创建一个新的会议。典型情况下，该会议将被规定为空会议名、锁定的、不可列出的、自动结束的。<br>
    </td>
  </tr>
</table>
</body>
</html>
