<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../../../../css/text.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<table width="100%" border="0" cellspacing="3" cellpadding="3">
  <tr> 
    <td class="text">　　<font color="#003399">多媒体著作工具的定义：一套用于创作多媒体应用程序的软件工具。目的是简化多媒体创作过程，主要用于创作各种课件和培训资料、电子出版物（百科全书、字典和参考书）、音像制品、动画制品、商业广告及各种网页和信息查询系统。</font><br>
      　　我们首先分析一下开发多媒体应用程序的两种方案：编程与著作。<br>
      <br>
      　<img src="../../../../images/chatp/chap07/001.gif" width="244" height="69"> 
      <br>
      　　开发多媒体应用程序有两种可选的方案：进行程序设计或使用著作工具，其选择与应用程序开发的进度和质量要求有很大关系。<br>
      　　著作工具试图将开发过程中的编程工作简化，用户利用它不需要复杂编程也能设计出多媒体应用程序。<br>
      　　<font color="#003399">例如，如果使用PowerPoint或Action!，你完全可以在一天之内作出一个多媒体的会议报告或产品展示。</font><br>
      　　程序设计语言，如C、C++、BASIC、Pascal等，常用来开发专门的应用程序。这些编程语言灵活、功能强大、能够开发范围广泛的多媒体应用程序，比如微软件公司开发的 
      Home系列CD 出版物就是编程实现的。<br>
      　　<font color="#003399">利用高级语言制作多媒体应用程序不仅需要编写许多行代码，还要求编程者具有多媒体信息处理的专业知识，对非专业技术人员来说，障碍是明显的。</font><br>
      　　一般来说，具有特色的、尤其是满足消费需求的多媒体应用程序通常采用编程语言。一些多媒体软件开发公司常常采用程序设计语言，因为它们需要设计新的具有特色的软件来吸引用户；而供训练和教育用的应用软件、演示软件和商品展示软件常采用著作工具，这是由于这些环境不存在很强的竞争压力，而用户又希望很快地完成一个应用，这正是著作工具最具诱惑的地方。<br>
      　　<b><font color="#003399">著作的优势与劣势</font></b><br>
      　　著作工具的主要特点首先在于它缩短了用户开发应用的时间，通常在1周甚至几天之内，用户就可以开始使用它。<br>
      　　<font color="#003399">Microsoft PowerPoint、Macromedia Action!就带有自己的说明指导程序，能帮助用户很快地进行创作，有时这不过是几小时的事。多数著作工具都提供图形界面，这些图形界面为用户设计了程序的隐含流向，并自动处理许多具体的程序指令。通常著作工具包含有许多特色功能，每个功能用户要学习大约几个小时。为了演示一个动画，程序员可能要编写许多行C代码，可是像AimTech公司的IconAuthor可以将演示多种动画文件的功能编进了著作工具，用户只需提供动画文件名即可。</font> 
      <br>
      　　著作工具另一个优势在于它提供了样板应用程序，这些样板对于通过简单的交互、快速拼装一个应用程序极为有用。著作工具也存在非常明显的不足。著作工具开发出的应用一般要比用程序语言开发的应用运行速度慢，因为用著作工具设计的应用程序一般要求著作工具本身或者另外一个运行版本（通常称为播放程序）才能在用户的机器上运行。<br>
      　　<font color="#003399">例如，为运行Action!设计的应用程序，最终用户必须有Action!或者开发者提供的Action!的一个运行版本：Action!Player。</font><br>
      　　著作工具比编程语言要昂贵得多。一般功能强大的著作工具零售价有数千美元，而一个很复杂的编程语言编译器仅为几百美元甚至更低。 <br>
      　　著作工具本身是一个需要支持与维护的软件。这个软件发生问题就会在用户的应用程序中表现出来，如果用户自己不能解决，就必须重新设计应用或者等待开发者前来解决，用户比较被动。著作工具提供了一个预先确定的功能集合，尽管有些系统允许熟练用户将定制的程序包含进去，但是这样的做法也因系统而异。著作工具仅仅允许用户暂时退出应用程序去执行一个独立的软件，当外部程序运行完毕，需重新进入著作工具并返回控制。另外，增加各种功能的做法可能仅适合某些特定的应用。一个允许用户跳出其执行环境去执行一个独立程序的著作工具，可能对教育软件比较合适，但就不太适合电子百科全书。 
      <br>
      　　<font color="#003399">实际上，采用著作工具就好比乘公共汽车，别人帮助你开车，所以你必须按照他们选定的地点上下车。著作工具的设计者要根据用户的基本需要来确定系统必须包含哪些功能，这就意味着你所需要的某些功能在一些著作工具中并不支持。<br>
      　　总结：多媒体著作工具的优势和劣势：<br>
      　　缩短了用户的开发时间；<br>
      　　提供样板应用程序；<br>
      　　运行速度慢需要著作工具和播放程序才能在用户机器上运行；<br>
      　　价格贵，数百到数千美元；<br>
      　　灵活性差，著作工具功能受限。 </font><br>
      　　<b><font color="#003399">编程的优势与劣势</font></b><br>
      　　程序设计语言就好像是一辆高性能的赛车，理论上，任何人只要拥有驾驶证就可驱车前进，但实际上只有那些有技术和经验的人才能发挥赛车的良好性能。<br>
      　　功能强大和灵活是程序设计语言的主要优势，可以编写出运行在指定机上的需要最少机器资源同时有独特的界面控制和功能的应用程序。<br>
      　　执行速度快是编程语言的另一优势，一个用程序设计语言编写的应用程序是经过编译和连接后生成的机器代码，其执行速度快于靠著作工具解释的应用程序。<br>
      　　<font color="#003399">例如，一个经过编译的程序显示一屏要等待1/4秒，而一个用著作工具作的软件完成同样任务可能要等待2秒，这一差别对最终用户极其明显。</font><br>
      　　另外，一个应用程序在使用过程中暴露出的问题几乎都可追溯到这个特定的应用程序是如何编写的，而且可由程序员自己解决。同时，既然著作工具本身就是用程序语言编写的，那么它们本身就可能存在缺陷，这种风险也要由用户承担。<br>
      　　采用程序设计语言制作多媒体软件的主要劣势在于个人成本高和开发时间长。一般来说，一个有经验的程序员要比会用某一著作工具的人员报酬高。一个小型的应用软件，也许让一个并无多少技能的人员采用著作工具即可方便地设计出来。另外，用编程语言设计一个应用程序可能比用著作工具来设计要花费更长的时间，因为程序员必须从头开始，而且要设计一些小的模块。 
      <br>
      　　<font color="#003399">编程语言的优势和劣势<br>
      　　功能强大、灵活、需要最少的机器资源，可以有独特的界面和功能；<br>
      　　执行速度快，一个经过编译的程序显示一屏要等待1/4秒，而著作工具显示一屏要几秒；<br>
      　　有利于创新，克服著作工具的不足；<br>
      　　个人成本高，开发时间长。</font><br>
    </td>
  </tr>
</table>
</body>
</html>
