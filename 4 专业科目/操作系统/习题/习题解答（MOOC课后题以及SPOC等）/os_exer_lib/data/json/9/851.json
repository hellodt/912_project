{
    "status":"ok",
    "knowledge":[
        "进程状态与控制"
    ],
    "degree_of_difficulty":1,
    "explain":"fork程序的两次执行时的输出信息\n    ```\n    xyong@portal:~/work$ ./a.out\n    Here I am in the program!  Time to wait = 5\n    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n    0 S  1000 11862 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n    0 S  1000 11863 11862  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n    0 R  1000 11864 11863  0  80   0 -  2433 -      pts/0    00:00:00 ps\n    I'm the parent at Line 33.  My parent's process ID is 11862, My process ID is 11739, status = 0.\n    I'm the child.  My parent's process ID is 11865, My process ID is 11862, status = 17.\n    Bye now!\n    Child 11865 exited with status 17.\n    I'm the parent at Line 43.  My parent's process ID is 11862, My process ID is 11739, status = 17.\n    xyong@portal:~/work$ ./a.out 3\n    Here I am in the program!  Time to wait = 3\n    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n    0 S  1000 11866 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n    0 S  1000 11867 11866  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n    0 R  1000 11868 11867  0  80   0 -  2433 -      pts/0    00:00:00 ps\n    I'm the parent at Line 33.  My parent's process ID is 11866, My process ID is 11739, status = 0.\n    I'm the child.  My parent's process ID is 11869, My process ID is 11866, status = 17.\n    Bye now!\n    Child 11869 exited with status 17.\n    I'm the parent at Line 43.  My parent's process ID is 11866, My process ID is 11739, status = 17.\n    xyong@portal:~/work$\n    ```\n\n",
    "question":"(20140410-2-期中考试试题v4a答案.docx)Fork\n（15分）进程管理是操作系统提供给应用程序的一种用于进程控制的服务。下面是一个用fork系统调用完成进程创建的程序。试回答下面问题：\n1) 描述fork系统调用的功能、调用接口。\n2) 补全程序的输出信息。\n    ```\n\t    //=========fork.c=========\n\t    #include\n\t    #include\n\t    #include\n\t    #include\n\t    #include\n\t    #define DEFAULT_TIME 5\n\t    #define DEFAULT_STATUS 0\n\t    int main (int argc, char argv) {\n\t        int child_id;\n\t        int seconds;\n\t        int status;\n\t        pid_t whodied;\n\t        status = DEFAULT_STATUS;\n\t        if (argc == 1)\n\t            seconds = DEFAULT_TIME;\n\t        else\n\t            seconds = atoi (argv[1]);\n\t        printf (\"Here I am in the program!  Time to wait = %d\n\t\", seconds);\n\t        system (\"ps -l\");\n\t        child_id = fork();\n\t        if (child_id) {\n\t            printf (\"I'm the parent at Line 33.  My parent's process ID is %d, My process ID is %d, status = %d.\n\t\", getpid(), getppid(), status);\n\t            whodied = wait (&status;);\n\t            printf (\"Child %d exited \", whodied);\n\t    / WIFEXITED  evaluates  to  true  when  the  process  exited  by using an exit(2V) call.\n\t     If WIFEXITED(status) is non-zero, WEXITSTATUS evaluates to  the low-order byte of the\n\t    argument that the child process passed to _exit() (see exit(2V)) or exit(3),  or  the  value  the  child  process returned from main() (see execve(2V)).\n\t    /\n\t            if (! WIFEXITED(status)) {\n\t                printf (\"abnormally!\n\t\");\n\t                }\n\t            else {\n\t                printf (\"with status %d.\n\t\", WEXITSTATUS(status));\n\t                }\n\t            printf (\"I'm the parent at Line 43.  My parent's process ID is %d, My process ID is %d, status = %d.\n\t\", getpid(), getppid(), WEXITSTATUS(status));\n\t            return status;\n\t            }\n\t        else {\n\t            status = 17;\n\t            sleep(seconds);\n\t            printf (\"I'm the child.  My parent's process ID is %d, My process ID is %d, status = %d.\n\t\", getpid(), getppid(), status);\n\t            printf (\"Bye now!\n\t\");\n\t            return status;\n\t            }\n\t        }\n\t    ```\n\tfork程序的两次执行时的输出信息\n\t    ```\n\t    xyong@portal:~/work$ ./a.out\n\t    Here I am in the program!  Time to wait = __(1)__\n\t    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n\t    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n\t    0 S  1000 11862 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n\t    0 S  1000 11863 11862  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n\t    0 R  1000 11864 11863  0  80   0 -  2433 -      pts/0    00:00:00 ps\n\t    I'm the parent at Line 33.  My parent's process ID is __(2)__, My process ID is __(3)__, status = __(4)__.\n\t    I'm the child.  My parent's process ID is __(5)__, My process ID is __(6)__, status = __(7)__.\n\t    Bye now!\n\t    Child 11865 exited with status __(8)__.\n\t    I'm the parent at Line 43.  My parent's process ID is __(9)__, My process ID is __(10)__, status = __(11)__.\n\t    xyong@portal:~/work$ ./a.out 3\n\t    Here I am in the program!  Time to wait = __(12)__\n\t    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n\t    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n\t    0 S  1000 11866 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n\t    0 S  1000 11867 11866  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n\t    0 R  1000 11868 11867  0  80   0 -  2433 -      pts/0    00:00:00 ps\n\t    I'm the parent at Line 33.  My parent's process ID is __(13)__, My process ID is __(14)__, status = __(15)__.\n\t    I'm the child.  My parent's process ID is __(16)__, My process ID is __(17)__, status = __(18)__.\n\t    Bye now!\n\t    Child __(19)__ exited with status __(20)__.\n\t    I'm the parent at Line 43.  My parent's process ID is 11866, My process ID is __(21)__, status = __(22)__.\n\t    xyong@portal:~/work$\n\t    ```\n    \n",
    "source":"网络",
    "answer":"fork程序的两次执行时的输出信息\n    ```\n    xyong@portal:~/work$ ./a.out\n    Here I am in the program!  Time to wait = 5\n    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n    0 S  1000 11862 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n    0 S  1000 11863 11862  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n    0 R  1000 11864 11863  0  80   0 -  2433 -      pts/0    00:00:00 ps\n    I'm the parent at Line 33.  My parent's process ID is 11862, My process ID is 11739, status = 0.\n    I'm the child.  My parent's process ID is 11865, My process ID is 11862, status = 17.\n    Bye now!\n    Child 11865 exited with status 17.\n    I'm the parent at Line 43.  My parent's process ID is 11862, My process ID is 11739, status = 17.\n    xyong@portal:~/work$ ./a.out 3\n    Here I am in the program!  Time to wait = 3\n    F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n    0 S  1000 11739 11738  0  80   0 -  6926 wait   pts/0    00:00:00 bash\n    0 S  1000 11866 11739  0  80   0 -  1041 wait   pts/0    00:00:00 a.out\n    0 S  1000 11867 11866  0  80   0 -  1101 wait   pts/0    00:00:00 sh\n    0 R  1000 11868 11867  0  80   0 -  2433 -      pts/0    00:00:00 ps\n    I'm the parent at Line 33.  My parent's process ID is 11866, My process ID is 11739, status = 0.\n    I'm the child.  My parent's process ID is 11869, My process ID is 11866, status = 17.\n    Bye now!\n    Child 11869 exited with status 17.\n    I'm the parent at Line 43.  My parent's process ID is 11866, My process ID is 11739, status = 17.\n    xyong@portal:~/work$\n    ```\n\n",
    "type":"question_answer",
    "q_number":851
}