{
    "status":"ok",
    "knowledge":[
        "进程间通信"
    ],
    "degree_of_difficulty":1,
    "explain":"1）（6分）每个运行primeproc的进程有一个自身编号index，其最多有一个子进程，子进程的编号号为index+1;这样形成了一个子进程链。\n1\\. main函数生成第一个primeproc进程后，将从2开始的所有整数发给primeproc进程；\n2\\. 每个primeproc第一次接受到消息时，会把消息输出。如果是再接受到消息，则会把第一次收到的数除这次收到的数，若不能整除，则把num交给下一个pr\nimeproc进行整除尝试；如果不存在下一个primeproc，这创建一个子进程，然后发送。\n3\\. 若所有的primeproc第一次收到的均是质数，这一个新的primeproc第一次收到的数必不能被之前所有质数整除，故必定也为质数。而第一个prim\neproc收到的是2,为质数，所以有归纳法可知，接下来的4个primeproc收到的也都是质数。\n4\\. primerproc进程结束的条件是达到上限。\n2) 可对每个进程创建一个“消息”队列（1分），send_event的操作就是把自身pid和event插入到要发送的进程pid对应的队列的尾部（2分），而r\necv_event的操作就是从自身的“消息”队列的头取出（2分）发送进程的pid和event.\n由于进程是同步的：\n1\\. 所以当队列为空时，recv_event应该阻塞（1分）睡眠，让接收进程睡眠在对应的信号量上；而send_event的操作在插入元素后，需要检查是否有\nsleep的进程，如果有，需要唤醒（1分）。\n2\\. 所以当队列为满时，send_event应该阻塞（1分）睡眠，让发送进程睡眠在对应的信号量上；而recv_event的操作在取出元素后，需要检查是否有\nsleep的进程，如果有，需要唤醒（1分）。\n",
    "question":"(20140606-期末考试试题&参考答案.docx)IPC\n(15分)在具备了执行用户态进程的能力之后，uCore要为这些进程提供的一个重要服务，是用户进程之间的消息传递机制（Inter-Process\nCommunication，简写为IPC）。现在，我们要为uCore实现以下两个系统调用，以实现一种同步的IPC机制（暂不考虑超时等功能）：\nint sys_send_event(int pid, int event);\n参数：pid - 该消息的目标进程的进程号；\nevent – 消息内容，用一个整型表示。\n返回值：消息成功发送时，返回0；否则，返回相应的错误代码。\nint sys_recv_event(int pid, int event);\n参数：pid - 函数返回时，pid保存发出消息的进程的进程号，可以为NULL；\nevent – 函数返回时，event保存消息内容，可以为NULL。\n返回值：消息成功接收时，返回0；否则，返回相应的错误代码。\n1）以下是一个基于上述IPC机制求质数的用户程序：\n    ```\n\t    #include\n\t    #include\n\t    #include\n\t    #include\n\t    const int total = 1000;\n\t    void primeproc(void)\n\t    {\n\t            int index = 0, this, num, pid = 0;\n\t    top:\n\t            recv_event(NULL, &this;);\n\t            cprintf(\"%d is a primer.\n\t\", this);\n\t            while (recv_event(NULL, &num;) == 0) {\n\t                    if ((num % this) == 0) {\n\t                            continue;\n\t                    }\n\t                    if (pid == 0) {\n\t                            if (index + 1 == total) {\n\t                                    goto out;\n\t                            }\n\t                            if ((pid = fork()) == 0) {\n\t                                    index++;\n\t                                    goto top;\n\t                            }\n\t                            if (pid < 0) {\n\t                                    goto out;\n\t                            }\n\t                    }\n\t                    if (send_event(pid, num) != 0) {\n\t                            goto out;\n\t                    }\n\t            }\n\t    out:\n\t            cprintf(\"[%04d] %d quit.\n\t\", getpid(), index);\n\t    }\n\t    int main(void)\n\t    {\n\t            int i, pid;\n\t            unsigned int time = gettime_msec();\n\t            if ((pid = fork()) == 0) {\n\t                    primeproc();\n\t                    exit(0);\n\t            }\n\t            assert(pid > 0);\n\t            for (i = 2;; i++) {\n\t                    if (send_event(pid, i) != 0) {\n\t                            break;\n\t                    }\n\t            }\n\t            cprintf(\"use %d msecs.\n\t\", gettime_msec() - time);\n\t            cprintf(\"primer3 pass.\n\t\");\n\t            return 0;\n\t    }\n\t    ```\n简述这个程序是如何判断并输出前五个质数的。\n2）给出一种基于等待队列的上述IPC机制的实现方案。  \n",
    "source":"网络",
    "answer":"1）（6分）每个运行primeproc的进程有一个自身编号index，其最多有一个子进程，子进程的编号号为index+1;这样形成了一个子进程链。\n1\\. main函数生成第一个primeproc进程后，将从2开始的所有整数发给primeproc进程；\n2\\. 每个primeproc第一次接受到消息时，会把消息输出。如果是再接受到消息，则会把第一次收到的数除这次收到的数，若不能整除，则把num交给下一个pr\nimeproc进行整除尝试；如果不存在下一个primeproc，这创建一个子进程，然后发送。\n3\\. 若所有的primeproc第一次收到的均是质数，这一个新的primeproc第一次收到的数必不能被之前所有质数整除，故必定也为质数。而第一个prim\neproc收到的是2,为质数，所以有归纳法可知，接下来的4个primeproc收到的也都是质数。\n4\\. primerproc进程结束的条件是达到上限。\n2) 可对每个进程创建一个“消息”队列（1分），send_event的操作就是把自身pid和event插入到要发送的进程pid对应的队列的尾部（2分），而r\necv_event的操作就是从自身的“消息”队列的头取出（2分）发送进程的pid和event.\n由于进程是同步的：\n1\\. 所以当队列为空时，recv_event应该阻塞（1分）睡眠，让接收进程睡眠在对应的信号量上；而send_event的操作在插入元素后，需要检查是否有\nsleep的进程，如果有，需要唤醒（1分）。\n2\\. 所以当队列为满时，send_event应该阻塞（1分）睡眠，让发送进程睡眠在对应的信号量上；而recv_event的操作在取出元素后，需要检查是否有\nsleep的进程，如果有，需要唤醒（1分）。\n",
    "type":"question_answer",
    "q_number":841
}