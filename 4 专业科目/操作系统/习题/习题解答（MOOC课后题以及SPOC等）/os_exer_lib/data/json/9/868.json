{
    "status":"ok",
    "knowledge":[
        "信号量"
    ],
    "degree_of_difficulty":1,
    "explain":"\"为了达到公平的目的，即在读者进行读取的时候，如果有写者在排队，后面的读者不能够加入到读取的队列中来，应该等待写者执行完写操作之后再进行读取。\n针对上面一种情况引入一个排队信号量q,每次有操作必须等待这个信号量释放再进行操作（如果有写操作在排队，q没有释放，下一个读操作没有办法进入并进行读操作）\n算法流程 q,s, mutex <=1, ReadCount <= 0 Reader: while True: wait(q) wait(mutex) if\nReadCount ==0 wait(s) ReadCount++ signal(mutex) signal(q) READING..........\nsignal(mutex) ReadCount-- if ReadCount==0 signal(s) signal(mutex) end while\nWriter: While True: wait(q) wait(s) WRITING......... singal(s) singal(w)\n问题二使用一个计数器计算当前还有几个剩下的读者名额，当写者掌控时，直接进行0/RN级别的替换。 代码无需修改。\"\n",
    "question":"\"此问题是对读者-写者问题的一个扩展，既如果读者写者均是平等的即二者都不优先情况下。\n此问题的一个更高的版本是说，每个资源可以同时读取的人的个数也是有限的（限制数RN）。\"\n",
    "source":"网络",
    "answer":"\"为了达到公平的目的，即在读者进行读取的时候，如果有写者在排队，后面的读者不能够加入到读取的队列中来，应该等待写者执行完写操作之后再进行读取。\n针对上面一种情况引入一个排队信号量q,每次有操作必须等待这个信号量释放再进行操作（如果有写操作在排队，q没有释放，下一个读操作没有办法进入并进行读操作）\n算法流程 q,s, mutex <=1, ReadCount <= 0 Reader: while True: wait(q) wait(mutex) if\nReadCount ==0 wait(s) ReadCount++ signal(mutex) signal(q) READING..........\nsignal(mutex) ReadCount-- if ReadCount==0 signal(s) signal(mutex) end while\nWriter: While True: wait(q) wait(s) WRITING......... singal(s) singal(w)\n问题二使用一个计数器计算当前还有几个剩下的读者名额，当写者掌控时，直接进行0/RN级别的替换。 代码无需修改。\"\n",
    "type":"question_answer",
    "q_number":868
}