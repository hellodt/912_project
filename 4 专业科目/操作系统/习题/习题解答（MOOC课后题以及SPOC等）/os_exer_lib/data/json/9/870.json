{
    "status":"ok",
    "knowledge":[
        "信号量"
    ],
    "degree_of_difficulty":1,
    "explain":"#include  #include  #include  #include  #include  #define ROUND 10 const char\nGOODS[3][20] = { \"Walkman\", \"Tape\", \"Battery\" }; const char WANT[3][20] = {\n\"Tape&amp;Battery;\", \"Walkman&amp;Battery;\", \"Walkman&amp;Tape;\" }; int\nsema_flag; int condvar_flag; semaphore_t listener[3]; semaphore_t seller;\nstruct proc_struct listener_sema_proc[3]; struct proc_struct\nseller_sema_proc; void listener_sema(void arg){ int i = (int) arg;\nwhile(sema_flag){ down(&amp;listener;[i]); if (sema_flag){ cprintf(\"No %d\nlistener has %s, and bought %s. sema\n\",i,GOODS[i],WANT[i]);\nup(&amp;seller;); } } cprintf(\"No %d listener quit! sema\n\",i); } void\nseller_sema(void arg){ int i; int pos; for(i=0;i<ROUND;i ++){ pos = rand() %\n3; cprintf(\"Iter %d : Seller is selling: %s. sema\n\",i,WANT[pos]);\nup(&amp;listener;[pos]); down(&amp;seller;); } sema_flag = 0; for(i = 0;i <\n3;i ++) up(&amp;listener;[i]); cprintf(\"Seller quit! sema\n\"); } monitor_t\nlmt, mtp2= &amp;lmt; struct proc_struct listener_condvar_proc[3]; struct\nproc_struct seller_condvar_proc; void seller_condvar(void arg){ int i; int\npos; for(i = 0;i < ROUND;i ++){ down(&amp;mtp2-;>mutex); pos = rand() % 3;\ncprintf(\"Iter %d : Seller is selling: %s. condvar\n\",i,WANT[pos]);\ncond_signal(&amp;mtp2-;>cv[pos + 1]); cond_wait(&amp;mtp2-;>cv[0]); if\n(mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); }\ncondvar_flag = 0; down(&amp;mtp2-;>mutex); for(i = 0;i < 3;i ++)\ncond_signal(&amp;mtp2-;>cv[i + 1]); cprintf(\"Seller_condvar quit!\n\"); if\n(mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); }\nvoid listener_condvar(void arg){ int num = (int)arg; down(&amp;mtp2-;>mutex);\ncprintf(\"No %d listener is waiting\n\", num); cond_wait(&amp;mtp2-;>cv[num+1]);\nif (mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex);\nwhile(condvar_flag){ down(&amp;mtp2-;>mutex); if(condvar_flag){ cprintf(\"No %d\nlistener has %s, and bought %s and is listening music now.condvar\n\",num,GOODS[num],WANT[num]); cond_signal(&amp;mtp2-;>cv[0]);\ncond_wait(&amp;mtp2-;>cv[num + 1]); } if (mtp2->next_count > 0)\nup(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); } cprintf(\"No %d listener\nquit! condvar\n\",num); } void check_sync(void) {/ 吸烟者问题拓展一（北大1999) / int i,\npid; //check semaphore sem_init(&amp;seller;, 0); pid =\nkernel_thread(seller_sema, NULL, 0); if (pid <= 0) { panic(\"create seller_sema\nfailed.\n\"); } seller_sema_proc = find_proc(pid);\nset_proc_name(seller_sema_proc, \"seller_sema_proc\"); sema_flag = 1; for(i = 0;\ni < 3; ++i){ sem_init(&amp;listener;[i], 0); pid =\nkernel_thread(listener_sema, (void )i, 0); if (pid <= 0) { panic(\"create\nNo.%d listener_sema failed.\n\", i); } listener_sema_proc[i] = find_proc(pid);\nset_proc_name(listener_sema_proc[i], \"listener_sema_proc\"); } //check\ncondition variable monitor_init(&amp;lmt;, 4); pid =\nkernel_thread(seller_condvar, NULL, 0); if (pid <= 0) { panic(\"create\nseller_condvar failed.\n\"); } seller_condvar_proc = find_proc(pid);\nset_proc_name(seller_condvar_proc, \"seller_condvar_proc\"); condvar_flag = 1;\nfor(i = 0; i < 3; ++i){ pid = kernel_thread(listener_condvar, (void )i, 0);\nif (pid <= 0) { panic(\"create No.%d listener_condvar failed.\n\"); }\nlistener_condvar_proc[i] = find_proc(pid);\nset_proc_name(listener_condvar_proc[i], \"listener_condvar_proc\"); } }\n",
    "question":"\"在一间酒吧里有三个音乐爱好者队列，第一队的音乐爱好者只有随身听，第二队的只有音乐磁带，第三队只有电池。而要听音乐就必须随身听，音乐磁带和电池这三种物品俱全\n。酒吧老板依次出售这三种物品中的任意两种。当一名音乐爱好者得到这三种物品并听完一首乐曲后，酒吧老板才能再一次出售这三种物品中的任意两种。于是第二名音乐爱好者\n得到这三种物品，并开始听乐曲。全部买卖就这样进行下去。试用P，V操作正确解决这一买卖。\"\n",
    "source":"网络",
    "answer":"#include  #include  #include  #include  #include  #define ROUND 10 const char\nGOODS[3][20] = { \"Walkman\", \"Tape\", \"Battery\" }; const char WANT[3][20] = {\n\"Tape&amp;Battery;\", \"Walkman&amp;Battery;\", \"Walkman&amp;Tape;\" }; int\nsema_flag; int condvar_flag; semaphore_t listener[3]; semaphore_t seller;\nstruct proc_struct listener_sema_proc[3]; struct proc_struct\nseller_sema_proc; void listener_sema(void arg){ int i = (int) arg;\nwhile(sema_flag){ down(&amp;listener;[i]); if (sema_flag){ cprintf(\"No %d\nlistener has %s, and bought %s. sema\n\",i,GOODS[i],WANT[i]);\nup(&amp;seller;); } } cprintf(\"No %d listener quit! sema\n\",i); } void\nseller_sema(void arg){ int i; int pos; for(i=0;i<ROUND;i ++){ pos = rand() %\n3; cprintf(\"Iter %d : Seller is selling: %s. sema\n\",i,WANT[pos]);\nup(&amp;listener;[pos]); down(&amp;seller;); } sema_flag = 0; for(i = 0;i <\n3;i ++) up(&amp;listener;[i]); cprintf(\"Seller quit! sema\n\"); } monitor_t\nlmt, mtp2= &amp;lmt; struct proc_struct listener_condvar_proc[3]; struct\nproc_struct seller_condvar_proc; void seller_condvar(void arg){ int i; int\npos; for(i = 0;i < ROUND;i ++){ down(&amp;mtp2-;>mutex); pos = rand() % 3;\ncprintf(\"Iter %d : Seller is selling: %s. condvar\n\",i,WANT[pos]);\ncond_signal(&amp;mtp2-;>cv[pos + 1]); cond_wait(&amp;mtp2-;>cv[0]); if\n(mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); }\ncondvar_flag = 0; down(&amp;mtp2-;>mutex); for(i = 0;i < 3;i ++)\ncond_signal(&amp;mtp2-;>cv[i + 1]); cprintf(\"Seller_condvar quit!\n\"); if\n(mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); }\nvoid listener_condvar(void arg){ int num = (int)arg; down(&amp;mtp2-;>mutex);\ncprintf(\"No %d listener is waiting\n\", num); cond_wait(&amp;mtp2-;>cv[num+1]);\nif (mtp2->next_count > 0) up(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex);\nwhile(condvar_flag){ down(&amp;mtp2-;>mutex); if(condvar_flag){ cprintf(\"No %d\nlistener has %s, and bought %s and is listening music now.condvar\n\",num,GOODS[num],WANT[num]); cond_signal(&amp;mtp2-;>cv[0]);\ncond_wait(&amp;mtp2-;>cv[num + 1]); } if (mtp2->next_count > 0)\nup(&amp;mtp2-;>next); else up(&amp;mtp2-;>mutex); } cprintf(\"No %d listener\nquit! condvar\n\",num); } void check_sync(void) {/ 吸烟者问题拓展一（北大1999) / int i,\npid; //check semaphore sem_init(&amp;seller;, 0); pid =\nkernel_thread(seller_sema, NULL, 0); if (pid <= 0) { panic(\"create seller_sema\nfailed.\n\"); } seller_sema_proc = find_proc(pid);\nset_proc_name(seller_sema_proc, \"seller_sema_proc\"); sema_flag = 1; for(i = 0;\ni < 3; ++i){ sem_init(&amp;listener;[i], 0); pid =\nkernel_thread(listener_sema, (void )i, 0); if (pid <= 0) { panic(\"create\nNo.%d listener_sema failed.\n\", i); } listener_sema_proc[i] = find_proc(pid);\nset_proc_name(listener_sema_proc[i], \"listener_sema_proc\"); } //check\ncondition variable monitor_init(&amp;lmt;, 4); pid =\nkernel_thread(seller_condvar, NULL, 0); if (pid <= 0) { panic(\"create\nseller_condvar failed.\n\"); } seller_condvar_proc = find_proc(pid);\nset_proc_name(seller_condvar_proc, \"seller_condvar_proc\"); condvar_flag = 1;\nfor(i = 0; i < 3; ++i){ pid = kernel_thread(listener_condvar, (void )i, 0);\nif (pid <= 0) { panic(\"create No.%d listener_condvar failed.\n\"); }\nlistener_condvar_proc[i] = find_proc(pid);\nset_proc_name(listener_condvar_proc[i], \"listener_condvar_proc\"); } }\n",
    "type":"question_answer",
    "q_number":870
}