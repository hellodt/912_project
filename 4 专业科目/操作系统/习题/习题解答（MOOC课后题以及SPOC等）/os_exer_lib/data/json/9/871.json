{
    "status":"ok",
    "knowledge":[
        "信号量"
    ],
    "degree_of_difficulty":1,
    "explain":"#include  #include  #include  #include  #include  int cinema=-1; int people=0;\nsemaphore_t mov[num]; / 每个电影一个信号量 / int wait[3]; void semaphore_test(i) /\ni：影片编号 / { if(cinema==-1 || (cinema==i && people>0)) { cinema=i;\nup(&amp;mov;[i]); } } void semaphore_movie_play(int i) { down(&amp;mutex;);\nsemaphore_test(i); int ifwait=0; if (i!=cinema) ifwait=1; wait[i]+=ifwait;\n//cprintf(\"testing %d %d %d\n\",cinema,i,mov[i].value); up(&amp;mutex;);\ndown(&amp;mov;[i]); down(&amp;mutex;); wait[i]-=ifwait; people++; cinema=i;\ncprintf(\"No.%d movie_sema is playing,remain people num:%d\n\",i,people);\n/电影放映/ //cprintf(\"testING %d %d %d %d\n\",cinema,i,mov[i].value,wait[i]); if\n(wait[i]!=0) up(&amp;mov;[i]); up(&amp;mutex;); //if (bf==people)\ndown(&amp;mov;[i]); } void semaphore_cinema_end(int i) / i：影片编号从0到N-1 / {\ndown(&amp;mutex;); / 进入临界区 / people--; cprintf(\"No.%d movie_sema quit,remain\npeople num: %d\n\",i,people); if(people==0) cinema=-1; semaphore_test(left);\nsemaphore_test(right); / 看一下其他影片可否播放 / up(&amp;mutex;); / 离开临界区 / } int\nsemaphore_movie(void  arg) / i：电影编号，从0到N-1 / { int i, iter=0; i=(int)arg;\ncprintf(\"I am No.%d movie_sema\n\",i); cprintf(\"Iter %d, No.%d movie_sema is\nready\n\",iter,i); do_sleep(SLEEP_TIME); semaphore_movie_play(i); / 开始电影放映 /\ndo_sleep(SLEEP_TIME); semaphore_cinema_end(i); / 结束放映 / cprintf(\"No.%d\nmovie_sema quit\n\",i); return 0; }\n",
    "question":"\"假设一个录像厅有0,1，2三种不同的录像片可由观众选择放映，录像厅的放映规则为:\n任一时刻最多只能放映一种录像片，正在放映的录像片是自动循环放映的，最后一个观众主动离开时结束当前录像片的放映；\n选择当前正在放映的录像片的观众可立即进入，允许同时有多位选择同一种录像片的观众同时观看，同时观看的观众数量不受限制；\n等待观看其他录像片的观众按到达顺序排队，当一种新的录像片开始放映时，所有等待观看该录像片的观众可依次序进入录像厅同时观看。用一个进程代表一个观众。\n要求:用信号量方法PV实现，并给出信号量定义和初始值。（最好也能写出录像厅的进程）\"\n",
    "source":"网络",
    "answer":"#include  #include  #include  #include  #include  int cinema=-1; int people=0;\nsemaphore_t mov[num]; / 每个电影一个信号量 / int wait[3]; void semaphore_test(i) /\ni：影片编号 / { if(cinema==-1 || (cinema==i && people>0)) { cinema=i;\nup(&amp;mov;[i]); } } void semaphore_movie_play(int i) { down(&amp;mutex;);\nsemaphore_test(i); int ifwait=0; if (i!=cinema) ifwait=1; wait[i]+=ifwait;\n//cprintf(\"testing %d %d %d\n\",cinema,i,mov[i].value); up(&amp;mutex;);\ndown(&amp;mov;[i]); down(&amp;mutex;); wait[i]-=ifwait; people++; cinema=i;\ncprintf(\"No.%d movie_sema is playing,remain people num:%d\n\",i,people);\n/电影放映/ //cprintf(\"testING %d %d %d %d\n\",cinema,i,mov[i].value,wait[i]); if\n(wait[i]!=0) up(&amp;mov;[i]); up(&amp;mutex;); //if (bf==people)\ndown(&amp;mov;[i]); } void semaphore_cinema_end(int i) / i：影片编号从0到N-1 / {\ndown(&amp;mutex;); / 进入临界区 / people--; cprintf(\"No.%d movie_sema quit,remain\npeople num: %d\n\",i,people); if(people==0) cinema=-1; semaphore_test(left);\nsemaphore_test(right); / 看一下其他影片可否播放 / up(&amp;mutex;); / 离开临界区 / } int\nsemaphore_movie(void  arg) / i：电影编号，从0到N-1 / { int i, iter=0; i=(int)arg;\ncprintf(\"I am No.%d movie_sema\n\",i); cprintf(\"Iter %d, No.%d movie_sema is\nready\n\",iter,i); do_sleep(SLEEP_TIME); semaphore_movie_play(i); / 开始电影放映 /\ndo_sleep(SLEEP_TIME); semaphore_cinema_end(i); / 结束放映 / cprintf(\"No.%d\nmovie_sema quit\n\",i); return 0; }\n",
    "type":"question_answer",
    "q_number":871
}