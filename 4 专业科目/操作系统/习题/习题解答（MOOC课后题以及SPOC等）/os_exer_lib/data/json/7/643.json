{
    "status":"ok",
    "knowledge":[
        "信号量"
    ],
    "degree_of_difficulty":1,
    "explain":"    ```\n    #define N 5\n    Int flag[N+1]; //flag[0]表示可用打印机数,\n    //flag表示第i号打印机的状态（1<=i<=N），0表示占用，1表示空闲\n    PCB queue=NULL;//进程阻塞队列\n    semaphore mutex_flag=1;//用于对flag数组的互斥操作\n    semaphore mutex_queue=1;//用于对阻塞队列的互斥操作\n    int require(int pid,int priority)\n    {\n       P(mutex_flag);\n       if(flag[0]>0)\n       {\n           flag[0]--;\n           for(int  i=1;i<N+1;i++)\n               if(flag=  =1)\n               {\n                   flag=0;\n                   break;\n               }\n           V(mutex_flag);\n           return i;\n       }\n       else\n       {\n           V(mutex_flag);\n           p(mutex_queue);\n           将进程pid按其优先数插入到等待队列queue中;\n           V(mutex_queue);\n       }\n    }\n    return(int print)\n    {\n       P(mutex_flag);\n       if(queue==NULL)\n       {\n           flag[0]++;\n           flag[print]=1;\n           V(mutex_flag);\n       }\n       else\n       {\n           V(mutex_flag);\n           p(mutex_queue);\n           将print分配给queue队首进程;\n           queue下移;\n           V(mutex_queue);\n       }\n    }\n    ```\n\n",
    "question":"打印机问题\n设系统中有5台类型相同的打印机，依次编号为1～5。又设系统中有n个使用打印机的进程，使用前申请，使用后释放。每个进程有一个进程标识，用于区别不同的进程。每个\n进程还有一个优先数，不同进程的优先数各异。当有多个进程同时申请时，按照进程优先数由高到低的次序实施分配。试用信号灯和PV操作实现对于打印机资源的管理，即要求\n编写如下函数和过程:\n(1)函数require(pid，pri): 申请一台打印机。参数pid为进程标识，其值为1到n的整数; pri为进程优先数，其值为正整数;\n函数返回值为所申请到打印机的编号，其值为1到5的整数;\n(2)过程return(prnt): 释放一台打印机。参数prnt为所释放打印机的编号，其值为1到5的整数。\n",
    "source":"网络",
    "answer":"    ```\n    #define N 5\n    Int flag[N+1]; //flag[0]表示可用打印机数,\n    //flag表示第i号打印机的状态（1<=i<=N），0表示占用，1表示空闲\n    PCB queue=NULL;//进程阻塞队列\n    semaphore mutex_flag=1;//用于对flag数组的互斥操作\n    semaphore mutex_queue=1;//用于对阻塞队列的互斥操作\n    int require(int pid,int priority)\n    {\n       P(mutex_flag);\n       if(flag[0]>0)\n       {\n           flag[0]--;\n           for(int  i=1;i<N+1;i++)\n               if(flag=  =1)\n               {\n                   flag=0;\n                   break;\n               }\n           V(mutex_flag);\n           return i;\n       }\n       else\n       {\n           V(mutex_flag);\n           p(mutex_queue);\n           将进程pid按其优先数插入到等待队列queue中;\n           V(mutex_queue);\n       }\n    }\n    return(int print)\n    {\n       P(mutex_flag);\n       if(queue==NULL)\n       {\n           flag[0]++;\n           flag[print]=1;\n           V(mutex_flag);\n       }\n       else\n       {\n           V(mutex_flag);\n           p(mutex_queue);\n           将print分配给queue队首进程;\n           queue下移;\n           V(mutex_queue);\n       }\n    }\n    ```\n\n",
    "type":"question_answer",
    "q_number":643
}