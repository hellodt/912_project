{
    "status":"ok",
    "knowledge":[
        ""
    ],
    "question":"1. 请描述系统调用fork()的功能和返回值含义。\n2. 请给出下面程序在命令行分别为“fork 1”和“fork 2”时，输出结果有多少行？其中以“Stage A: i=0”、“Stage A: i=1”、“Stage B: i=0”和“Stage B: i=1”为开头的输出数分别是多少行？建议给出计算过程。\n\n```\n-------------fork.cpp------------------\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <stdlib.h>\nusing namespace std;\n\nint LOOP;\n\nint main(int argc,char *argv[])\n{\n    if (argc != 2) {\n        fprintf(stderr, \"Command line error.\\n\");\n        exit(-1);\n    }\n    \n    LOOP = atoi(argv[1]);\n    \n     pid_t  pid;\n      int  i;\n\n      for  (i=0;  i<LOOP;  i++)\n      {\n          /* fork  another  process  */\n          pid = fork();\n          if  (pid < 0) { /*error  occurred  */\n              fprintf(stderr, \"Fork Failed\");\n              exit(-1);\n          }\n          else if (pid == 0) { /* child process */\n              fprintf(stdout,  \"Stage A: i=%d,  pid=%d,  parent  pid=%d\\n\",i,\n                      getpid() ,getppid());\n          }\n\n\n          /* fork  another  process  */\n          pid = fork();\n          if  (pid < 0) { /*error  occurred  */\n              fprintf(stderr, \"Fork Failed\");\n              exit(-1);\n          }\n          else if (pid == 0) { /* child process */\n              fprintf(stdout,  \"Stage B: i=%d,  pid=%d,  parent  pid=%d\\n\",i,\n                      getpid() ,getppid());\n          }\n\n      }\n      wait(NULL);\n      exit(0);\n} \n---------------------------------------\n```",
    "explain":"MacBookPro-2:fork xyongcn$ ./a.out 1\nStage A: i=0,  pid=95501,  parent  pid=95500\nStage B: i=0,  pid=95502,  parent  pid=95500\nStage B: i=0,  pid=95503,  parent  pid=95501\n\nMacBookPro-2:fork xyongcn$ ./a.out 2\nStage A: i=0,  pid=95525,  parent  pid=95524\nStage B: i=0,  pid=95526,  parent  pid=95524\nStage A: i=1,  pid=95527,  parent  pid=95524\nStage B: i=1,  pid=95528,  parent  pid=95524\nStage B: i=0,  pid=95529,  parent  pid=95525\nStage A: i=1,  pid=95530,  parent  pid=95526\nStage A: i=1,  pid=95531,  parent  pid=95525\nStage B: i=1,  pid=95532,  parent  pid=95527\nStage B: i=1,  pid=95533,  parent  pid=95526\nStage B: i=1,  pid=95534,  parent  pid=95525\nStage A: i=1,  pid=95535,  parent  pid=95529\nStage B: i=1,  pid=95536,  parent  pid=95530\nStage B: i=1,  pid=95537,  parent  pid=95531\nStage B: i=1,  pid=95538,  parent  pid=95529\nStage B: i=1,  pid=95539,  parent  pid=95535\n\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=0\"\nStage A: i=0,  pid=95525,  parent  pid=95524\nStage B: i=0,  pid=95526,  parent  pid=95524\nStage B: i=0,  pid=95529,  parent  pid=95525\n\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=1\" | grep A\nStage A: i=1,  pid=95527,  parent  pid=95524\nStage A: i=1,  pid=95530,  parent  pid=95526\nStage A: i=1,  pid=95531,  parent  pid=95525\nStage A: i=1,  pid=95535,  parent  pid=95529\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=1\" | grep B\nStage B: i=1,  pid=95528,  parent  pid=95524\nStage B: i=1,  pid=95532,  parent  pid=95527\nStage B: i=1,  pid=95533,  parent  pid=95526\nStage B: i=1,  pid=95534,  parent  pid=95525\nStage B: i=1,  pid=95536,  parent  pid=95530\nStage B: i=1,  pid=95537,  parent  pid=95531\nStage B: i=1,  pid=95538,  parent  pid=95529\nStage B: i=1,  pid=95539,  parent  pid=95535\n",
    "degree_of_difficulty":1,
    "source":"2016期中",
    "answer":"MacBookPro-2:fork xyongcn$ ./a.out 1\nStage A: i=0,  pid=95501,  parent  pid=95500\nStage B: i=0,  pid=95502,  parent  pid=95500\nStage B: i=0,  pid=95503,  parent  pid=95501\n\nMacBookPro-2:fork xyongcn$ ./a.out 2\nStage A: i=0,  pid=95525,  parent  pid=95524\nStage B: i=0,  pid=95526,  parent  pid=95524\nStage A: i=1,  pid=95527,  parent  pid=95524\nStage B: i=1,  pid=95528,  parent  pid=95524\nStage B: i=0,  pid=95529,  parent  pid=95525\nStage A: i=1,  pid=95530,  parent  pid=95526\nStage A: i=1,  pid=95531,  parent  pid=95525\nStage B: i=1,  pid=95532,  parent  pid=95527\nStage B: i=1,  pid=95533,  parent  pid=95526\nStage B: i=1,  pid=95534,  parent  pid=95525\nStage A: i=1,  pid=95535,  parent  pid=95529\nStage B: i=1,  pid=95536,  parent  pid=95530\nStage B: i=1,  pid=95537,  parent  pid=95531\nStage B: i=1,  pid=95538,  parent  pid=95529\nStage B: i=1,  pid=95539,  parent  pid=95535\n\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=0\"\nStage A: i=0,  pid=95525,  parent  pid=95524\nStage B: i=0,  pid=95526,  parent  pid=95524\nStage B: i=0,  pid=95529,  parent  pid=95525\n\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=1\" | grep A\nStage A: i=1,  pid=95527,  parent  pid=95524\nStage A: i=1,  pid=95530,  parent  pid=95526\nStage A: i=1,  pid=95531,  parent  pid=95525\nStage A: i=1,  pid=95535,  parent  pid=95529\nMacBookPro-2:fork xyongcn$ cat 2.txt | grep \"i=1\" | grep B\nStage B: i=1,  pid=95528,  parent  pid=95524\nStage B: i=1,  pid=95532,  parent  pid=95527\nStage B: i=1,  pid=95533,  parent  pid=95526\nStage B: i=1,  pid=95534,  parent  pid=95525\nStage B: i=1,  pid=95536,  parent  pid=95530\nStage B: i=1,  pid=95537,  parent  pid=95531\nStage B: i=1,  pid=95538,  parent  pid=95529\nStage B: i=1,  pid=95539,  parent  pid=95535\n",
    "type":"question_answer",
    "q_number":1525
}