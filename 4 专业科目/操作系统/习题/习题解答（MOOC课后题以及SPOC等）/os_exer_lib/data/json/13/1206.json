{
    "status":"ok",
    "knowledge":[
        "中断、异常与系统调用"
    ],
    "degree_of_difficulty":1,
    "explain":"B 以ucore OS为例，在lab5中有详细的syscall机制的设计实现。比如用户执行显示输出一个字符的操作，由于涉及向屏幕和串口等外设输出字符，\n需要向操作系统发出请求，具体过程是应用程序运行在用户态，通过用户程序库函数cputch，会调用sys_putc函数，\n并进一步调用syscall函数（在usr/libs/syscall.c文件中），而这个函数会执行“int 0x80”来发出系统调用请求。在ucore OS内核中，\n会接收到这个系统调用号（0x80）的中断（参见 kernel/trap/trap.c中的trap_dispatch函数有关 “case T_SYSCALL:”的实现）,\n并进一步调用内核syscall函数（参见 kernel/syscall/syscall.c中的实现）来完成用户的请求。内核在内核态（也称特权态）完成后，\n通过执行“iret”指令（kernel/trap/trapentry.S中的“__trapret:”下面的指令），返回到用户态应用程序发出系统调用的下一条指令继续执行应用程序。\n",
    "question":"用户程序通过____向操作系统提出访问外部设备的请求\n",
    "source":"网络",
    "answer":"B",
    "type":"single_answer",
    "options":[
        "A.I/O指令",
        "B.系统调用",
        "C.中断",
        "D.创建新的进程"
    ],
    "q_number":1206
}