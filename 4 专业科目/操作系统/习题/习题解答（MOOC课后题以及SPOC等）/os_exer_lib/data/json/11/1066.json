{
    "status":"ok",
    "knowledge":[
        "进程状态与控制"
    ],
    "degree_of_difficulty":1,
    "explain":"8分，六个点（4个数每个1.5分），父和子每个1分；\nParent Process: Global variable: 2 Stack variable: 20\nChild Process: Global variable: 3 Stack variable: 21\n    ```\n    fork-example.cpp\n    =====================fork-example.cpp===========================\n    #include\n    #include\n    // Required by for routine\n    #include\n    #include\n    #include    // Declaration for exit()\n    using namespace std;\n    int globalVariable = 2;\n    main()\n    {\n        string sIdentifier;\n        int    iStackVariable = 20;\n        pid_t pID = fork();\n        if (pID == 0)                // child\n        {\n            // Code only executed by child process\n            sIdentifier = \"Child Process: \";\n            globalVariable++;\n            iStackVariable++;\n        }\n        else if (pID < 0)            // failed to fork\n        {\n            cerr << \"Failed to fork\" << endl;\n            exit(1);\n            // Throw exception\n        }\n        else                                   // parent\n        {\n            // Code only executed by parent process\n            sIdentifier = \"Parent Process:\";\n        }\n        // Code executed by both parent and child.\n        cout << sIdentifier;\n        cout << \" Global variable: \" << globalVariable;\n        cout << \" Stack variable: \"  << iStackVariable << endl;\n    }\n    =============================================================\n    ```\n\n",
    "question":"(8分)给出下面程序fork-example.cpp的输出结果；\n    ```\n\t    =====================fork-example.cpp===========================\n\t    #include\n\t    #include\n\t    #include\n\t    #include\n\t    #include\n\t    using namespace std;\n\t    int globalVariable = 2;\n\t    main()\n\t    {\n\t       string sIdentifier;\n\t       int    iStackVariable = 20;\n\t       pid_t pID = fork();\n\t       if (pID == 0)\n\t       {\n\t          sIdentifier = \"Child Process: \";\n\t          globalVariable++;\n\t          iStackVariable++;\n\t        }\n\t        else if (pID < 0)\n\t        {\n\t            cerr << \"Failed to fork\" << endl;\n\t            exit(1);\n\t        }\n\t        else\n\t        {\n\t          sIdentifier = \"Parent Process:\";\n\t        }\n\t        cout << sIdentifier;\n\t        cout << \" Global variable: \" << globalVariable;\n\t        cout << \" Stack variable: \"  << iStackVariable << endl;\n\t    }\n\t    =============================================================\n\t    ```\n    \n",
    "source":"网络",
    "answer":"8分，六个点（4个数每个1.5分），父和子每个1分；\nParent Process: Global variable: 2 Stack variable: 20\nChild Process: Global variable: 3 Stack variable: 21\n    ```\n    fork-example.cpp\n    =====================fork-example.cpp===========================\n    #include\n    #include\n    // Required by for routine\n    #include\n    #include\n    #include    // Declaration for exit()\n    using namespace std;\n    int globalVariable = 2;\n    main()\n    {\n        string sIdentifier;\n        int    iStackVariable = 20;\n        pid_t pID = fork();\n        if (pID == 0)                // child\n        {\n            // Code only executed by child process\n            sIdentifier = \"Child Process: \";\n            globalVariable++;\n            iStackVariable++;\n        }\n        else if (pID < 0)            // failed to fork\n        {\n            cerr << \"Failed to fork\" << endl;\n            exit(1);\n            // Throw exception\n        }\n        else                                   // parent\n        {\n            // Code only executed by parent process\n            sIdentifier = \"Parent Process:\";\n        }\n        // Code executed by both parent and child.\n        cout << sIdentifier;\n        cout << \" Global variable: \" << globalVariable;\n        cout << \" Stack variable: \"  << iStackVariable << endl;\n    }\n    =============================================================\n    ```\n\n",
    "type":"question_answer",
    "q_number":1066
}