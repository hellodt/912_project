{
    "status":"ok",
    "knowledge":[
        "信号量"
    ],
    "degree_of_difficulty":1,
    "explain":"Semaphore 方法 设置三个信号量：full(itemCounter)、empty(vacancyCounter)和mutex。\nfull表示有数据的缓冲块数目，初值是0；empty表示空的缓冲块数初值是n；mutex用于访问缓冲区时的互斥，初值是1。\n三种进程，consumer,producer,both，both表示既是producer又是consumer。 producer 伪码 while true\np(empty); P(mutex); produce one; v(mutex); v(full); end while consumer 伪码\nwhile true p(full); P(mutex); consume one; v(mutex); v(empty); end while both\n伪码 if empty>=1 then begin p(empty); p(mutex); product one; v(mutex); v(full);\nend if full>=1 then begin p(full); p(mutex); consume one; v(mutex); v(empty);\nend Monitor 方法\n设置一个monitor，内有两个条件变量：notFull和notEmpty。其中，notFull表示缓存满，notEmpty表示缓存空 producer\n伪码 lock.Acquire(); while (count == n) notFull.Wait(&amp;lock;); produce one;\ncount++; notEmpty.Signal(); end while lock.Release(); consumer 伪码\nlock.Acquire(); while (count == 0); notEmpty.Wait(&amp;lock;); consume one;\ncount--; notFull.Signal(); end while lock.Release(); both 伪码 lock.Acquire();\nnotEmpty.Wait(&amp;lock;); consume one; count--; notFull.Signal();\nnotFull.Wait(&amp;lock;); produce one; count++; notEmpty.Signal();\nlock.Release();\n",
    "question":"\"设P,Q,R共享一个缓冲区,P,Q构成一对生产者-消费者,R既为生产者又为消费?者。使用P,V 实现其同步。\"\n",
    "source":"网络",
    "answer":"Semaphore 方法 设置三个信号量：full(itemCounter)、empty(vacancyCounter)和mutex。\nfull表示有数据的缓冲块数目，初值是0；empty表示空的缓冲块数初值是n；mutex用于访问缓冲区时的互斥，初值是1。\n三种进程，consumer,producer,both，both表示既是producer又是consumer。 producer 伪码 while true\np(empty); P(mutex); produce one; v(mutex); v(full); end while consumer 伪码\nwhile true p(full); P(mutex); consume one; v(mutex); v(empty); end while both\n伪码 if empty>=1 then begin p(empty); p(mutex); product one; v(mutex); v(full);\nend if full>=1 then begin p(full); p(mutex); consume one; v(mutex); v(empty);\nend Monitor 方法\n设置一个monitor，内有两个条件变量：notFull和notEmpty。其中，notFull表示缓存满，notEmpty表示缓存空 producer\n伪码 lock.Acquire(); while (count == n) notFull.Wait(&amp;lock;); produce one;\ncount++; notEmpty.Signal(); end while lock.Release(); consumer 伪码\nlock.Acquire(); while (count == 0); notEmpty.Wait(&amp;lock;); consume one;\ncount--; notFull.Signal(); end while lock.Release(); both 伪码 lock.Acquire();\nnotEmpty.Wait(&amp;lock;); consume one; count--; notFull.Signal();\nnotFull.Wait(&amp;lock;); produce one; count++; notEmpty.Signal();\nlock.Release();\n",
    "type":"question_answer",
    "q_number":1047
}