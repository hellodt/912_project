{
    "status":"error",
    "knowledge":[
        "实验环境准备实验"
    ],
    "degree_of_difficulty":1,
    "explain":"解释\n",
    "question":"6.fork程序输出 一、 (10分)给出程序fork.c的输出结果。注：（c1）getpid()和getppid()是两个系统调用，分别返回本进程标识和父\n进程标识。（2）你可以假定每次新进程创建时生成的进程标识是顺序加1得到的，该程序执行时创建的第一个进程的标识为1000。\n,\n    ```\n\t    fork.c\n\t    ----------------------\n\t    / Includes /\n\t    #include      / Symbolic Constants /\n\t    #include   / Primitive System Data Types /\n\t    #include       / Errors /\n\t    #include       / Input/Output /\n\t    #include    / Wait for Process Termination /\n\t    #include      / General Utilities /\n\t    int main()\n\t    {\n\t        pid_t childpid; / variable to store the child's pid /\n\t        int retval;     / child process: user-provided return code /\n\t        int status;     / parent process: child's exit status /\n\t        / only 1 int variable is needed because each process would have its\n\t           own instance of the variable\n\t           here, 2 int variables are used for clarity /\n\t        / now create new process /\n\t        childpid = fork();\n\t        if (childpid >= 0) / fork succeeded /\n\t        {\n\t            if (childpid == 0) / fork() returns 0 to the child process /\n\t            {\n\t                printf(\"CHILD: I am the child process!\n\t\");\n\t                printf(\"CHILD: Here's my PID: %d\n\t\", getpid());\n\t                printf(\"CHILD: My parent's PID is: %d\n\t\", getppid());\n\t                printf(\"CHILD: The value of my copy of childpid is: %d\n\t\", childpid);\n\t                printf(\"CHILD: Sleeping for 1 second...\n\t\");\n\t                sleep(1); / sleep for 1 second /\n\t                printf(\"CHILD: Enter an exit value (0 to 255): \");\n\t                scanf(\" %d\", &retval;);\n\t                printf(\"CHILD: Goodbye!\n\t\");\n\t                exit(retval); / child exits with user-provided return code /\n\t            }\n\t            else / fork() returns new pid to the parent process /\n\t            {\n\t                printf(\"PARENT: I am the parent process!\n\t\");\n\t                printf(\"PARENT: Here's my PID: %d\n\t\", getpid());\n\t                printf(\"PARENT: The value of my copy of childpid is %d\n\t\", childpid);\n\t                printf(\"PARENT: I will now wait for my child to exit.\n\t\");\n\t                wait(&status;); / wait for child to exit, and store its status /\n\t                printf(\"PARENT: Child's exit code is: %d\n\t\", WEXITSTATUS(status));\n\t                printf(\"PARENT: Goodbye!\n\t\");\n\t                exit(0);  / parent exits /\n\t            }\n\t        }\n\t        else / fork returns -1 on failure /\n\t        {\n\t            perror(\"fork\"); / display error message /\n\t            exit(0);\n\t        }\n\t    }\n\t    ```\n    \n",
    "source":"网络",
    "answer":"解释\n",
    "type":"question_answer",
    "q_number":1124
}