原作:Yiwind；参与修改：Macsy,cy,muyi

【 在 Yiwind (轮回) 的大作中提到: 】

一.判断

1.死锁的充分条件是互斥、占有且等待、非剥夺、循环等待，且缺一不可


2.处理机调度算法中的多级反馈队列会动态改变进程的优先级


3.RAID可以同时提高访问速度和容错率


4.页式虚拟存储没有碎片


5.clock算法也有belady现象


6.与普通页表相比，反向页表能降低将虚拟地址映射为物理地址需要的内存的大小



二.简答题


1.一个32位的虚拟地址，分为两级页表，最高9位为一级页表，中间11位是二级页表。问页面的长度是多少？虚拟空间一共有多少个页？



2.一个文件存储系统，有12个直接索引，1个一级索引，1个二级索引，1个三级索引，文件的簇大小是8K，索引指针占64bit。问该文件系统理论上最大可以储存的文件大小？



3.如果作业等待队列中有N个作业，Ni个作业的运行时间为Ti，且对于任意作业Ni，有Ti-1<Ti<Ti+1，则用最小短作业调度算法能获得最小平均周转时间。上述说法对吗？请证明。



4.一个进程有8个逻辑页面，给它四个物理页面，给了一个访问的顺序（一共访问33次）。

a.用LRU的置换方法，问每次访问后物理页面里存的是哪些页面，并求出主存命中率

b.用FIFO的置换方法，问每次访问后物理页面里存的是哪些页面，求出主存命中率

c.LRU算法比FIFO算法好的特征是什么



三.问答题


1.给了一个银行家算法的当前状态，需求矩阵和E。

a.该状态是不是安全的？说明原因

b.问系统是不是可以给p3资源:{0,6,2,1},说明为什么？



2.写出读者－写者中写者优先的方案，用C语言来写。利用信号量，不能使用信号量集。


3.n个进程，以下为第一个用软件实现的可把等待次数降低到n-1的临界区访问的算法。

a.除了让权等待，还有哪三个要素是解决临界区问题的必须条件

b.证明这个程序满足解决临界区问题的这三个条件

(代码大概就是这样吧，大家帮忙改正一下)
(flag初始化为idle，turn初始化为0~n-1的任意值)


enum pstate={idle,want_in,in_cs};
pstate flag[n];
int turn;


每个进程Pi的代码如下：
do
{
  while(1)
 {
    flag[i]=want_in;
    j=turn;
    while(j!=i)
   {
       if(flag[j]==idle)   
             j=turn;
       else
             j=(j+1)%n;    
   }
 

   flag[i]=in_cs;
   j=0;
   while(j<n &&(j!=i || flag[j]!=in_cs))
      j++;
   if(j>=n &&(turn==i || flag[turn]==idle))
      break;
 }

 turn=i;


 临界区


 flag[i]=idle;
 j=(turn+1)%n;
 while(flag[j]==idle)
    j=(j+1)%n;
 turn=j; 


 剩余区

}while(1);
