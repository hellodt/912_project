
## 判断题

- 由同一组共n个词条构成的任意两颗BST，经过O(logn)次zig或者zag旋转之后，比可互相转换（错）

```
邓课件：由同一组共n个关键码组成的BST，经O(n)次旋转之后，都可相互转化
习题解：[7-15]规模为n的任何两颗等价二叉搜索树，至多经过2n-2次旋转调整即可彼此转化
```
- 设在有向图G中，存在一条自顶点v到u的路径，于是若在某次DFS中有"dTime[v] < dTime[u]"，则在这次DFS所生产的DFS森林中，v必是u的祖先（对）

```
在DFS中边的类别总共有四种:

- TREE(树边): 父->子
- FORWARD(前向边): 祖先->非儿子后代节点
- BACKWARD(后向边): 后代->非父亲祖先的节点
- CROSS(跨边): 两个非祖先关系节点的有向边

1. 由于v到u存在路径，故在一次DFS中vu两个节点必然存在于一棵树中
2. 由于 dTime[v] < dTime[u] ，故v->u可能是TREE和FORWARD两种情况
3. 故两种边都表明v是u的祖先

```

- 在无向连通图G中选定一个顶点s，并将各顶点v到s的距离记作dist(v)，特别地dist(s)=0，于是在G.BFS(s)的过程中，若辅助队列为Q，则"dist(Q.front())+1 >= dist(Q.rear())"始终成立 （对）

```
习题解：[6-7]前沿集内的各顶点始终按其在BFS树种的深度在辅助队列中单调排列
且任何时刻同处于辅助队列中的顶点，深度彼此相差不超过一个单位

注：在树的层次遍历中，仍然有此结论
```

- 只要起始于有向图G中某顶点s的某次DFS所生成的是一棵树，则起始于s的任何一次DFS都将生成一棵数(对)

```

由于某次DFS生成的是一棵树，故本图不存在两片不连通的节点。
即使是这样，也存在DFS生成多棵树的情况，如书上164页的例子，因为是有向图，导致某些单向路径无法到达。
但通过起始于s的DFS使得本图中全部的点均可达到，故无论通过什么顺序，能达到的边最终也会访问到。

```

- 无论g和h互素与否，已经h-有序的序列再经g-排序之后，必然继续保持h-有序(对)

```
书中原文：可以看出，希尔排序对Wk = h的矩阵逐列排序之后产生的序列，即符合h-ordered.而这个过程在希尔排序中被称为h-sorting。因此，任何一个序列在h-sorting之后，必然是h-ordered.
假设在前一轮的排序中，序列达到了h-rodered，在后一轮的排序中，序列又达到了g-ordered。那么，在g-ordered中，是否仍然保持h-ordered呢？答案是肯定的。Knuth在著名的ACP书中给出了证明(Vol.3 p.90)

这里gh不需要互素，互素这里是邮资问题的条件，互素与knuth结论是解决邮资问题两个平行的条件，之间并无关联

```



2、PFS每次调用priorUpdata()，总复杂度O(n) 错？
9、跳转表若变成掷筛子为六才上升一层，？


1、BFS、DFS的复杂度可能不是O(N+E) 对
3、Floyd建堆，每次同层之间下滤顺序打乱，不影响复杂度和正确性 对
4、经过k条backward边就有k个环 对
5、将0..2^d-1插入AVL一定高度为d 对
6、两棵key值顺序一样的BBST经过O(logN)次zig、zag就能互相转化 错
7、将2014个数插入splay，第一次访问经过2013次旋转，则是单调插入的 对
8、跳转表期望高度O(logN) 对
10、多叉堆比二叉堆插入慢，删除快 错
11、字符集变大，概率平均，则bc表比next表好 对
12、shell排序若将插入排序改成归并排序，效率变快 错
13、radix排序将桶排序改成quick排序，仍然正确  错


